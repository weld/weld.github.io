---
layout: base
title: Community
priority: 0.5
change_frequency: weekly
---
%div{:style=>"float: right;"}
  %script{:type=>"text/javascript", :src=>"http://www.ohloh.net/p/77325/widgets/project_factoids.js"}

%h1 Community
%p Weld is an open-source project. Contributions and participation is welcome.

%h2 Quick links:
%ul{:style=>"list-style-type: none; margin-left: 0px;"}
  %li
    %a{:href=>"https://issues.jboss.org/browse/WELD#selectedTab=com.atlassian.jira.plugin.system.project%3Asummary-panel",:target=>'_blank'}
      %i.fa.fa-bug
        issue tracker
  %li
    %a{:href=>"http://github.com/weld",:target=>'_blank'}
      %i.fa.fa-github 
        source code repository
  %li
    %a{:href=>"https://community.jboss.org/en/weld?view=discussions",:target=>'_blank'}
      %i.fa.fa-comment 
        user forum
  %li
    %a{:href=>"http://webchat.freenode.net/?channels=weld-dev",:target=>'_blank'}
      %i.fa.fa-comments
        \#weld-dev
    IRC channel hosted on
    %code
      freenode.net
    (
    %a{:href=>"http://transcripts.jboss.org/channel/irc.freenode.org/%23weld-dev/index.html",:target=>'_blank'}
      log
    )
  %li
    %a{:href=>"https://lists.jboss.org/mailman/listinfo/weld-dev",:target=>'_blank'}
      %i.fa.fa-envelope
        weld-dev mailing list
  %li
    %a{:href=>"https://issues.jboss.org/issues/?filter=12320398",:target=>'_blank'}
      %i.fa.fa-tasks
        list of starter issues
  %li
    %a{:href=>"https://github.com/weld/core/graphs/contributors",:target=>'_blank'}
      %i.fa.fa-user
        contributors

%h2 How to contribute
%p
  Want to join the group of
  %a{:href=>"https://github.com/weld/core/graphs/contributors"}
    Weld contributors
  ?
  It's easy. A great way to start is to check out our
  %a{:href=>"https://issues.jboss.org/issues/?filter=12320398"}
    list of starter issues.
  Besides, there are other ways to contribute, for example:
  %ul
    %li
      reporting bugs in our
      %a{:href=>"https://issues.jboss.org/browse/WELD"}
        issue tracker
    %li
      fix or expand our
      %a{:href=>"http://docs.jboss.org/weld/reference/latest-master/en-US/html/"}
        reference documentation
    %li
      expand our
      %a{:href=>"https://github.com/weld/core/tree/master/tests-arquillian"}
        test suite
      by writing a test case
    %li
      implement a new feature or enhancement

%h3
  1. Fork and clone source code repository from
  %a{:href=>"https://github.com/weld"}
    GitHub
%p
  If you are new to GitHub you can find help
  %a{:href=>"https://help.github.com/categories/bootcamp/"}
    here.
  Weld implementation resides in
  %a{:href=>"https://github.com/weld/core"}
    core repository.
  To clone your new fork execute following command in your command line:
%span
  %code
    git clone git@github.com:<your_account_name>/core.git

%h3 2. Explore Weld source code structure
%p
  You can import Weld source as Maven project to your favourite IDE. Before you start coding we ask you to setup code formatting. You can find neccessary files for your IDE in
  %b ide-configs
  directory in your local clone directory structure. If you are new to CDI/Weld then the
  %b examples
  and
  %b probe
  directories could be good starting point for you.

%h3 3. Choose a topic of your interest
%p
  You can check open issues, tasks, feature requests and bugs at
  %a{:href=>"https://issues.jboss.org/browse/WELD/"}
    Weld Jira.
  Alternatively, feel free to come up with new ideas.
%p
  If you are new to Weld and need help, use
  %a{:href=>"https://developer.jboss.org/en/weld?view=discussions"}
    user forum
  or
  %a{:href=>"http://webchat.freenode.net/?channels=weld-dev"}
    \#weld-dev IRC channel.
  For discussing Weld development use our
  %a{:href=>"https://lists.jboss.org/mailman/listinfo/weld-dev"}
    development mailing list.
  When working on a new feature or bug it's very helpful to also provide tests case covering the related area.

%h3 4. Submit a pull request
%p
  We follow the
  %a{:href=>"http://git-scm.com/book/en/Distributed-Git-Distributed-Workflows#Integration-Manager-Workflow"}
    Integration Manager Workflow
  for managing changes to the Weld source code. If you are new to using GitHub we recommend that you read this
  %a{:href=>"https://help.github.com/articles/using-pull-requests"}
    tutorial.
%p
  Before submitting a pull request make sure your branch can be built without any errors and the tests are passing
  (running "mvn clean install" in Weld core root directory could be sufficient). Commit your work to your branch
  with a suitable commit message (it's good idea to include Jira issue key if any exists) and submit a pull request
  to the related upstream branch at GitHub. Pull request will trigger CI job at
  %a{:href=>"http://hudson.jboss.org/hudson/job/Weld-2.x-pull-player-executor-osprey/"}
    Jenkins
  where you can check your results. Once the request passes tests and is verified by an integration manager (Weld core developers)
  you become a Weld
  %a{:href=>"https://github.com/weld/core/graphs/contributors"}
    contributor
  \:-).

%h2 How to report a bug
%p
  The 
  %a{:href=>"https://issues.jboss.org/projects/WELD"}
    issue tracker
  is where all Weld bugs, feature requests and enhancement requests reside.
  It is therefore a place to start when you want to file a bug. We are trying to address every reported bug, which means we
  first need to understand the issue, prepare environment (application servers, Java vendor and version etc.) and finally 
  reproduce it. Once we do this, we usually create an automated test and search for a solution. This workflow gets a lot faster
  if the issue is reported properly, e.g. contains all the necessary information. Here are a few points on how to report a bug:
  %ul
    %li
      %b Browse current issues before creating a new one.
      %br/
      Try to avoid duplicating issues. There might be issue similar to yours which could have been resolved or is currently
      open/in progress.
    %li
      %b Create one issue per bug
      %br/
      If you encountered several problems, do not put them all in one issue. Instead create issue for each problem encountered.
      This makes each issue clear, focused and easy to track and follow. If need be, you can always link issues together.
    %li
      %b Give the issue a proper name.
      %br/
      The name should already give an idea what the issue is going to be about. If its the interceptors you want to talk about,
      mention it in the issue name.
    %li
      %b Provide information about environment.
      %br/
      Mention the version of Weld, application server, dependencies which might be relevant to the issue and so forth.
      We are always verifying bugs in multiple environments but to reproduce your case, we want to simulate your environment.
    %li
      %b Give clear description of the issue.
      %br/
      This is pretty straightforward, the better you describe it, the less we ask "What do you mean by ... ?" .
    %li
      %b Provide a reproducer or a test case if possible.
      %br/
      Last but definitely not least providing a reproducer speeds up the process a lot. You bumped into an issue and likely
      investigated it and to some extend understood it. This ultimately makes you the best person to provide an example.
      Actually you might already have one - the application where you came across this problem! Don't hesitate to share it 
      with us. General rule is that the reproducer should contain the smallest possible piece of code showing the bug.
      The purpose is to isolate the bug from anything which may interfere hence allowing for easier bug hunting.
