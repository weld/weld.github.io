<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>https://weld.cdi-spec.org/</id>
<title>Weld</title>
<updated>2021-03-18T16:28:30+01:00</updated>
<link href="https://weld.cdi-spec.org/news.atom" rel="self" type="application/atom+xml" />
<link href="https://weld.cdi-spec.org/" rel="alternate" type="text/html" />
<entry>
<id>https://weld.cdi-spec.org/news/2021/03/18/weld-317Final/</id>
<title>Weld 3.1.7.Final</title>
<updated>2021-03-18T16:28:30+01:00</updated>
<published>2021-03-18T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2021/03/18/weld-317Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.1.7.Final along with API 3.1.SP4 is now up for grabs!


Along a few bugfixes, the flagship of this release is a rework of Weld&#8217;s default class defining utilities which should eliminate those pesky JDK 11+ warnings about illegal reflective access.
You can find more details on it below or in the JIRA ticket; in case you encounter any issue with it, please don&#8217;t hesitate to reach out to us.


So, let&#8217;s take a closer look:




Class Defining in Weld



Weld Core is now a Multi-Release JAR providing two different implementations for JDK 8 and JDK 11 or newer


Integrators are still encouraged to implement ProxyServices...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.1.7.Final along with API 3.1.SP4 is now up for grabs!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Along a few bugfixes, the flagship of this release is a rework of Weld’s default class defining utilities which should eliminate those pesky JDK 11+ warnings about illegal reflective access.
You can find more details on it below or in the JIRA ticket; in case you encounter any issue with it, please don’t hesitate to reach out to us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, let’s take a closer look:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Class Defining in Weld&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core is now a Multi-Release JAR providing two different implementations for JDK 8 and JDK 11 or newer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrators are still encouraged to implement &lt;a href=&quot;https://github.com/weld/api/blob/3.1.SP4/weld-spi/src/main/java/org/jboss/weld/serialization/spi/ProxyServices.java&quot;&gt;&lt;code&gt;ProxyServices&lt;/code&gt;&lt;/a&gt; class from our API&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All implementations of this interface are now presumed to support class defining (&lt;a href=&quot;https://github.com/weld/api/blob/3.1.SP4/weld-spi/src/main/java/org/jboss/weld/serialization/spi/ProxyServices.java#L138-L150&quot;&gt;&lt;code&gt;ProxyServices#supportsClassDefining()&lt;/code&gt;&lt;/a&gt; is now deprecated and not used)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For SE environment or an integrator that doesn’t implement the aforementioned API, Weld now provides a default implementation of &lt;code&gt;ProxyServices&lt;/code&gt; which:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On JDK 8 behaves the same as it did until now - it cracks open &lt;code&gt;ClassLoader.defineClass(…​)&lt;/code&gt; method and uses that&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On JDK 11+ it uses a combination of &lt;code&gt;MethodHandles.Lookup&lt;/code&gt; and a custom &lt;code&gt;ClassLoader&lt;/code&gt;; the former is used for vast majority of cases with class loader being a solution for edge cases such as default packages or beans from signed JARs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other Weld Core Fixes&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BeanAttributesConfigurator&lt;/code&gt; could incorrectly initialize default qualifiers when &lt;code&gt;@Named&lt;/code&gt; was involved (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2659&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2659&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Synthetic alternative beans did not trigger &lt;code&gt;ProcessBean&lt;/code&gt; event as they should when enabled (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2658&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2658&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed proxy creation for beans in default package (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2657&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2657&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed a corner case scenario where a hierarchy of classes with bridge methods would not get correctly intercepted (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2656&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2656&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no WildFly patch at the moment. We are currently exploring how to properly ship a patch that would align with WildFly usage of Galleon; the tracking JIRA can be seen (&lt;a href=&quot;https://issues.redhat.com/browse/WELD-2660&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.1.7.Final/en-US/html_single/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12353263&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2021/01/13/weld-316Final/</id>
<title>Weld 3.1.6.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2021-01-13T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2021/01/13/weld-316Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.1.6.Final is now available and brings a dosage of bug fixes and updates with it.
Without further due, let&#8217;s dive straight into it!


Fixes and improvements:




Weld Core



Fix for decorators operating on interfaces with default methods (WELD-2647)


Weld will no longer try to load classes for specific JDK version when using multi-release JARs (WELD-2652)


ProxyFactory was changed to produce more deterministic and sensible names when based off interfaces (WELD-2618)



NOTE: this slightly changes names of generated proxy classes but has no effect on the functionality itself








Weld Servlet



Detect Jetty server in GWT 2.8+ test environment (WELD-2635)


Injection into Undertow servlet listener now works as intended (WELD-2636)



This should...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.1.6.Final is now available and brings a dosage of bug fixes and updates with it.
Without further due, let’s dive straight into it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fix for decorators operating on interfaces with default methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2647&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2647&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld will no longer try to load classes for specific JDK version when using multi-release JARs (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2652&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2652&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProxyFactory&lt;/code&gt; was changed to produce more deterministic and sensible names when based off interfaces (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2618&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2618&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NOTE: this slightly changes names of generated proxy classes but has no effect on the functionality itself&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Detect Jetty server in GWT 2.8+ test environment (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2635&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2635&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Injection into Undertow servlet listener now works as intended (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2636&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2636&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This should work from Undertow 2.2.0.Final onwards&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bean defining annotation can be specified as generic &lt;code&gt;SeContainerInitializer&lt;/code&gt; property (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2639&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2639&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other bits&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed issue preventing upgrade of surefire plugin in our testsuite (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2634&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2634&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Several corrections to OSGi package configuration (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2642&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2642&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2644&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2644&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2645&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2645&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2646&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2646&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-introduce multi HTML documentation output in best-effort mode; this is mainly to keep old links working (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2640&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2640&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix intermittent test failure in &lt;code&gt;DispatchingTest&lt;/code&gt; caused by race condition (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2650&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2650&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time around, the &lt;a href=&quot;http://download.jboss.org/weld/3.1.6.Final/wildfly-21.0.2.Final-weld-3.1.6.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 21.0.2.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.1.6.Final/en-US/html_single/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12346955&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2020/12/16/weld-400Final/</id>
<title>Weld 4.0.0.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2020-12-16T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2020/12/16/weld-400Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
An early Xmas present for CDI lovers is here - Final release for Weld 4 is now available!
You can pick your Xmas jar-packaged present from Maven Central right away.


Since there were no new reported issues after integrating Weld 4.0.0.CR1 version into GlassFish and WildFly EE 9 preview, we have promoted Weld to Final release.
Latest core version is now 4.0.0.Final and Weld API that ships with it is 4.0.Final.


Functionally, Weld 3 and 4 remain identical and both are getting the same treatment and doses of bugfixes.
The main difference is that Weld 4 operates with EE 9, meaning it expects you to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An early Xmas present for CDI lovers is here - &lt;code&gt;Final&lt;/code&gt; release for Weld 4 is now available!
You can pick your Xmas jar-packaged present from Maven Central right away.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since there were no new reported issues after integrating Weld &lt;code&gt;4.0.0.CR1&lt;/code&gt; version into GlassFish and WildFly EE 9 preview, we have promoted Weld to &lt;code&gt;Final&lt;/code&gt; release.
Latest core version is now &lt;code&gt;4.0.0.Final&lt;/code&gt; and Weld API that ships with it is &lt;code&gt;4.0.Final&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Functionally, Weld 3 and 4 remain identical and both are getting the same treatment and doses of bugfixes.
The main difference is that Weld 4 operates with EE 9, meaning it expects you to use it with CDI 3.0 along with the new &lt;code&gt;jakarta&lt;/code&gt; package names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given that most changes poured into this version were more about dependecy updates, structural changes etc., I won’t list them all here.
However, if you are still curious, you could take a peek at &lt;a href=&quot;https://issues.redhat.com/projects/WELD?selectedItem=com.atlassian.jira.jira-projects-plugin:release-page&amp;amp;status=all&quot;&gt;JIRA release page&lt;/a&gt; and browse various Weld 4 releases that we did over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What’s more important is that we are keen on hearing from you should you find any issues with this version.
Whether you are an integrator or user, we realize no project is ever bug-free and we want to smack those bugs!
So if you hit any problems that you think are bugs, let us know via one of the usual channels:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ask on mailing list &lt;code&gt;weld-dev@lists.jboss.org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;a href=&quot;https://issues.redhat.com/projects/WELD/summary&quot;&gt;JIRA&lt;/a&gt; issues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drop the question on &lt;a href=&quot;https://gitter.im/weld/user&quot;&gt;Weld Gitter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, the Weld team wishes you Merry Christmas and Happy New Year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sorry to disappoint, but we cannot provide a patch yet.
WildFly &lt;a href=&quot;https://github.com/wildfly/wildfly/tree/master/ee-9&quot;&gt;source code&lt;/a&gt; already contains the needed bits for EE 9 server variant, but there wasn’t a release yet.
Good news is, once there is a release, it will already contain Weld 4 Final!
From there on, we can then deliver patches as we used to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/4.0.0.Final/en-US/html_single/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12352570&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2020/09/18/weld-400Beta1/</id>
<title>Weld 4.0.0.Beta1</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2020-09-18T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2020/09/18/weld-400Beta1/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
A new Weld 4 release is now available!
Latest core version is now 4.0.0.Beta1 and Weld API that ships with it is 4.0.Beta1.


I will not be listing links to issues as usual, because I think more important work was done outside of JIRA tracking this time (although you can check the issues here).
Instead, let me sum it up in a short list of noticeable changes:




All Weld bits are now present in Maven Central



Including servlet core (and shaded) which had to be left out last time





We are able to execute CDI TCKs in EE 9 environment once again and it&#8217;s all passing


We...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new Weld 4 release is now available!
Latest core version is now 4.0.0.Beta1 and Weld API that ships with it is 4.0.Beta1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will not be listing links to issues as usual, because I think more important work was done outside of JIRA tracking this time (although you can check the issues &lt;a href=&quot;https://issues.redhat.com/projects/WELD/versions/12346364&quot;&gt;here&lt;/a&gt;).
Instead, let me sum it up in a short list of noticeable changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All Weld bits are now present in Maven Central&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Including servlet core (and shaded) which had to be left out last time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are able to execute CDI TCKs in EE 9 environment once again and it’s all passing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are now able to test servlets with Tomcats and Undertow&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jetty testing is not possible yet because there is no &lt;a href=&quot;https://github.com/arquillian/arquillian-container-jetty/issues/43&quot;&gt;Arquillian adapter&lt;/a&gt; for it yet&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reworked documentation generation tooling&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld docs now have similar look to those of CDI and are distributed in either PDF or single page HTML format&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Did some updates on Javadoc generation in API and Core if generated with JDK 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Big update pass on tooling and dependencies&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We are now using Dependabot and have bumped almost every dependency and tooling in the project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Which also led to nice cleanup and fixing of several issues&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On top of that, every bugfix that would go into Weld 3 is of course being added to Weld 4 as well so those aren’t missing either!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sadly we cannot provide a patch for WildFly as there is not yet any official release that would support EE 9.
As soon as there is one, we will surely follow up with Weld patch!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/4.0.0.Beta1/en-US/html_single/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12346364&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2020/08/12/weld-315Final/</id>
<title>Weld 3.1.5.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2020-08-12T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2020/08/12/weld-315Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
New maintenance release is now out - Weld 3.1.5.Final.
It comes along with Weld API 3.1.SP3 although there are no significant changes in the API.
The release was mainly to update to a new parent project version, allowing us to consume newer plugins and prepare ground for MR JAR support.
As for core artifacts, there are some bugfixes as usual, so let&#8217;s take a look at those.


Fixes and improvements:




Weld Core



Allow to aggressively invoke setAttribute() when manipulating with conversation map in session (WELD-2626)



This behaviour is gated behind a property; it doesn&#8217;t affect standard Weld behaviour





Automatically cleanup leftover HttpSessionDestructionContext when starting new session context on...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New maintenance release is now out - Weld 3.1.5.Final.
It comes along with Weld API 3.1.SP3 although there are no significant changes in the API.
The release was mainly to update to a new parent project version, allowing us to consume newer plugins and prepare ground for MR JAR support.
As for core artifacts, there are some bugfixes as usual, so let’s take a look at those.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow to aggressively invoke &lt;code&gt;setAttribute()&lt;/code&gt; when manipulating with conversation map in session (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2626&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2626&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This behaviour is gated behind a property; it doesn’t affect standard Weld behaviour&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatically cleanup leftover &lt;code&gt;HttpSessionDestructionContext&lt;/code&gt; when starting new session context on a thread (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2631&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2631&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix a rare case where an integer overflow could happen during alternative priority ordering (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2628&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2628&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet Support&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;WebAppBeanArchiveScanner&lt;/code&gt; to allow serving modules without publishing (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2570&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2570&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other bits&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ObserverMethodConfigurator&lt;/code&gt; initialized by reading an &lt;code&gt;AnnotatedType&lt;/code&gt; previously didn’t set the method as async when it should (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2609&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2609&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix up generation of javadoc (especially with JDK 11) for shaded artifacts and make it include Weld API/SPI as well as CDI API javadoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prepare ground for MR JAR releases which are a likely solution to JDK 11 class defining for SE (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2619&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2619&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is hopefully coming in the very next release&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updates to website tooling (Docker image, Ruby dependencies) and updates to some old &lt;code&gt;http&lt;/code&gt; references which should now be &lt;code&gt;https&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-enable testing of CDI TCK 1.2 with Weld 3.x; this was broken sometime during migration to Jakarta artifacts (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2624&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2624&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A test that assumed an order in between conversation context lifecycle and session timeouts was found to be wrong (&lt;code&gt;ConversationContextDestroyedOnSessionTimeoutTest&lt;/code&gt;) and was re-written to remove the erroneous assumption (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2629&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2629&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correct JaCoCo TCK execution (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2625&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2625&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time around, the &lt;a href=&quot;http://download.jboss.org/weld/3.1.5.Final/wildfly-20.0.1.Final-weld-3.1.5.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 20.0.1.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.1.4.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12343306&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2020/05/13/weld-jakarta-ee-9/</id>
<title>Weld 4 and Jakarta EE 9</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2020-05-13T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2020/05/13/weld-jakarta-ee-9/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<category term="jakarta"></category>
<summary>
Weld Meets Jakarta EE 9


Most of you surely know that Jakarta EE 9 is on the horizon; slowly but steadily it is making its way into Java world.
And we are not far behind, in fact we have just released Weld 4.0.0.Alpha2 which is an implementation of CDI 3.0!
You heard that right, in Jakarta EE 9, all APIs have bumped their major versions; CDI turned 3.0 and so Weld version implementing that became 4.0.
Hand in hand with it goes Weld API 4.0.Alpha1, also adapted to EE 9.


Some basic information about the release:




All the bits should be available in Maven Central at...
</summary>
<content type="html">
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_weld_meets_jakarta_ee_9&quot;&gt;Weld Meets Jakarta EE 9&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of you surely know that Jakarta EE 9 is on the horizon; slowly but steadily it is making its way into Java world.
And we are not far behind, in fact we have just released &lt;strong&gt;Weld 4.0.0.Alpha2&lt;/strong&gt; which is an implementation of CDI 3.0!
You heard that right, in Jakarta EE 9, all APIs have bumped their major versions; CDI turned 3.0 and so Weld version implementing that became 4.0.
Hand in hand with it goes Weld API 4.0.Alpha1, also adapted to EE 9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some basic information about the release:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All the bits should be available in Maven Central at this point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is also &lt;code&gt;.zip&lt;/code&gt; distribution as usual, see &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;download page&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No WildFly patch is provided this time around because WildFly does not yet have an EE 9 branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_working_and_broken_parts&quot;&gt;Working and Broken Parts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only, yet considerably huge, change in APIs is (or at least should be) the swap from &lt;code&gt;javax&lt;/code&gt; to &lt;code&gt;jakarta&lt;/code&gt; packages.
This comes with bunch of problems, for instance there is no EE server that could run on EE 9 with new packages yet.
GlassFish is going to be first and they are working on integrating all the EE 9 reference implementations.
There are some chicken-egg problems such as Weld requiring EE 9 server to execute CDI TCKs, but at the same time there is GlassFish needing Weld 4.0 to start operating with EE 9 in the first place.
For this reason, our first few 4.0 releases are going to be marked as &lt;code&gt;Alpha&lt;/code&gt; or &lt;code&gt;Beta&lt;/code&gt;, they will not be fully tested and might be missing some parts that previous releases contained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s what’s working:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All testing that doesn’t require full EE container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld core implementation and API works as usual and is fully released&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld examples work only partially, all those needing EE container have nowhere to be deployed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE works fully&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Probe should work so long as you are in SE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And here are the missing parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We cannot execute CDI TCKs until there are stable GlassFish build&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We should be able to renew this pretty soon&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other in-container tests that we have (running on WildFly) are now disabled&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Servlet parts of Weld are &lt;strong&gt;completely excluded&lt;/strong&gt; from early releases&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is because there is currently no servlet working on EE 9, therefore we have nothing to adapt our internals to, yet&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One big and sadly unanswered question is that of backward compatibility.
In Jakarta itself, there seems to be a consensus of EE 9 not being backward compatible with EE 8.
Weld 4 on its own will not work with applications written for Java EE 8 - basically with anything requiring old &lt;code&gt;javax&lt;/code&gt; namespace packages.
However, EE servers will be forced to adapt somehow, so I expect a tooling might eventually emerge that will allow to run legacy applications on newer servers.
But that is yet to be seen and surely no sooner than after EE 9 release when other big servers start to adopt it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_development_plans&quot;&gt;Development Plans&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just to make things clear - we are planning on actively developing both, Weld 3 and Weld 4.
We understand that EE server will need to take their time switching to Jakarta EE 9, all the more due to the aforementioned circumstances around backward compatibility.
Therefore, both our versions will get their share of updates and bug fixes in the future!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2020/03/28/weld-314Final/</id>
<title>Weld 3.1.4.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2020-03-28T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2020/03/28/weld-314Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
New Weld version is here, say hello to Weld 3.1.4.Final.
There are only few issues included in this release, so let&#8217;s take a look at them.


Fixes and improvements:




Weld Core



ObserverMethodConfigurator initialized by reading an AnnotatedType previously didn&#8217;t set the method as async when it should (WELD-2609)


Fixed observability of @Destroyed events for Conversation context when there are multiple WARs deployed (WELD-2610)


After a failed attempt to restore a conversation, Weld could omit firing @Initialized event; this is now working properly (WELD-2611)


Cleanup of stored conversations required unnecessarily many locks simultaneously which could lead to deadlock on some servers (WELD-2612)


Removed Unsafe usage as means of cracking...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New Weld version is here, say hello to Weld 3.1.4.Final.
There are only few issues included in this release, so let’s take a look at them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ObserverMethodConfigurator&lt;/code&gt; initialized by reading an &lt;code&gt;AnnotatedType&lt;/code&gt; previously didn’t set the method as async when it should (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2609&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2609&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed observability of &lt;code&gt;@Destroyed&lt;/code&gt; events for Conversation context when there are multiple WARs deployed (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2610&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2610&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a failed attempt to restore a conversation, Weld could omit firing &lt;code&gt;@Initialized&lt;/code&gt; event; this is now working properly (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2611&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2611&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cleanup of stored conversations required unnecessarily many locks simultaneously which could lead to deadlock on some servers (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2612&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2612&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed &lt;code&gt;Unsafe&lt;/code&gt; usage as means of cracking open &lt;code&gt;ClassLoader&lt;/code&gt; for proxy definition (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2613&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2613&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This only helped to hide &lt;code&gt;IllegalAccess&lt;/code&gt; warning on JDK 11 (which will now show again)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Starting with JDK 12 and newer, &lt;code&gt;Unsafe&lt;/code&gt; doesn’t work at all making this solution obsolete&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We’ve created (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2619&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2619&lt;/a&gt;) in order to search for better solution that would work across all JDK versions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;HttpSessionContext.destroy()&lt;/code&gt; could sometimes not destroy the instance if it wasn’t used in current request (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2615&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2615&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix OSGi versions for EE dependencies (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2616&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2616&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Properly close stream after reading &lt;code&gt;weld.properties&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2606&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2606&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time around, the &lt;a href=&quot;http://download.jboss.org/weld/3.1.4.Final/wildfly-19.0.0.Final-weld-3.1.4.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 19.0.0.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.1.4.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12343306&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2019/11/28/weld-313Final/</id>
<title>Weld 3.1.3.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2019-11-28T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2019/11/28/weld-313Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.1.3.Final arrives along with Weld API 3.1.SP2.
This is a minor update which had a main goal of swapping whole Weld internals from Java EE 8 to Jakarta EE 8.


Fixes and improvements:




Weld API/SPI



API was transferred to Jakarta EE GAVs (WELD-2598)





Weld Core



Core and whole testing was transferred to Jakarta EE GAvs (WELD-2598)


Properties inside beans.xml now support spec-descriptor-property-replacement on WildFly (WELD-2600)


Rolling updates delimiter is now correctly ignored for external bean archives (WELD-2596)


Allow for private final method in intercepted beans, these methods are then ignored during interception but Weld no longer blows up (WELD-2595)





Weld Servlet



Adjust Jetty attributes accordingly to how they were renamed...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.1.3.Final arrives along with Weld API 3.1.SP2.
This is a minor update which had a main goal of swapping whole Weld internals from Java EE 8 to Jakarta EE 8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld API/SPI&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API was transferred to Jakarta EE GAVs (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2598&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2598&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Core and whole testing was transferred to Jakarta EE GAvs (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2598&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2598&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Properties inside &lt;code&gt;beans.xml&lt;/code&gt; now support spec-descriptor-property-replacement on WildFly (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2600&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rolling updates delimiter is now correctly ignored for external bean archives (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2596&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2596&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow for &lt;code&gt;private final&lt;/code&gt; method in intercepted beans, these methods are then ignored during interception but Weld no longer blows up (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2595&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2595&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adjust Jetty attributes accordingly to how they were renamed (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2597&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2597&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fix several misplaced licenses that were causing confusion (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2599&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2599&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time around, the &lt;a href=&quot;http://download.jboss.org/weld/3.1.3.Final/wildfly-18.0.1.Final-weld-3.1.3.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 18.0.1.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.1.3.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12342783&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2019/08/06/weld-312Final/</id>
<title>Weld 3.1.2.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2019-08-06T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2019/08/06/weld-312Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.1.2.Final is coming along with Weld API 3.1.SP1. It is another small release bringing in mainly bugfixes.
One notable thing is that thanks to guys from Jetty, Weld 3.1.2.Final is ready to operate with lastest Jetty 9 as well as upcoming Jetty 10.
Other than that we have tried to address some dodgy issues with possible race conditions and leaks - see for yourself!


Fixes and improvements:




Weld API/SPI



Fixed possible leak in Jandex index through SimpleServiceRegistry (WELD-2592)



This could only happen on application server supporting Jandex index and was only noticeable with a lot of application deployed at the same time








Weld Core



Fixed a case...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.1.2.Final is coming along with Weld API 3.1.SP1. It is another small release bringing in mainly bugfixes.
One notable thing is that thanks to guys from Jetty, Weld 3.1.2.Final is ready to operate with lastest Jetty 9 as well as upcoming Jetty 10.
Other than that we have tried to address some dodgy issues with possible race conditions and leaks - see for yourself!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld API/SPI&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed possible leak in Jandex index through &lt;code&gt;SimpleServiceRegistry&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2592&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2592&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This could only happen on application server supporting Jandex index and was only noticeable with a lot of application deployed at the same time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed a case where some context event notification wouldn’t trigger observers due to race condition (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2557&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2557&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed rare &lt;code&gt;IllegalAccessError&lt;/code&gt; problem during interception when methods had (package) private parameters from different methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2583&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2583&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Such methods are now automatically ignored when creating intercepted subclasses&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attempted to fix a race condition that could happen when trying to concurrently initiate conversation ID generator (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2585&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2585&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld now correctly disregards synthetic methods when considering proxyability (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2586&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2586&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correction to &lt;code&gt;beans.xml&lt;/code&gt; parses when using Weld namespace (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2591&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2591&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved classpath scanning to account for manifest file entries (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2589&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2589&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;javax.enterprise.inject.scan.implicit=true&lt;/code&gt; and &lt;code&gt;org.jboss.weld.se.archive.isolation=false&lt;/code&gt; now work together correctly (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2590&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2590&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update Weld to new Jetty integration model prior to Jetty release (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2587&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2587&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld 3.1.2.Final is ready to roll with to-be-released Jetty 9.4.x as well as Jetty 10.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Of course we also kept legacy support in place, so even older version will still run&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time around, the &lt;a href=&quot;http://download.jboss.org/weld/3.1.2.Final/wildfly-17.0.1.Final-weld-3.1.2.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 17.0.1.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.1.2.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12341958&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2019/05/07/weld-311Final/</id>
<title>Weld 3.1.1.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2019-05-07T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2019/05/07/weld-311Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.1.1.Final is out, it is a rather small nonetheless important maintenance release.
There is bunch of fixes present here; notably one for context propagation API that could cause some headaches with context seemingly not propagating.
Moving on, we also have some improvements to asynchronous events on default executors or ordering on ProcessAnnotatedType events.


Fixes and improvements:




Weld API/SPI


Weld Core



WeldAlterableContext#clearAndSet() was incorrectly leaving some caches behind (WELD-2566)


Fix serializability issue with intercepted session beans having private methods (WELD-2574)


Asynchronous event notification on default executor should preserve TCCL (WELD-2573)


Fix ordering of ProcessAnnotatedType events via @Priority (WELD-2568)


Small optimization for distributed environment when bean index is empty (WELD-2577)


Custom InjectionTarget...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.1.1.Final is out, it is a rather small nonetheless important maintenance release.
There is bunch of fixes present here; notably one for context propagation API that could cause some headaches with context seemingly not propagating.
Moving on, we also have some improvements to asynchronous events on default executors or ordering on &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld API/SPI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldAlterableContext#clearAndSet()&lt;/code&gt; was incorrectly leaving some caches behind (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2566&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2566&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix serializability issue with intercepted session beans having private methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2574&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2574&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asynchronous event notification on default executor should preserve TCCL (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2573&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2573&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix ordering of &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; events via &lt;code&gt;@Priority&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2568&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2568&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small optimization for distributed environment when bean index is empty (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2577&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom &lt;code&gt;InjectionTarget&lt;/code&gt; now invokes any present &lt;code&gt;dispose()&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2580&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2580&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Align behaviour of self-invocation of otherwise intercepted method from within private final observer method (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2571&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2571&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow to specify custom &lt;code&gt;DiscoveryStrategy&lt;/code&gt; via service loader mechanism (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2578&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2578&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update tooling around documentation builds (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2564&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2564&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update JBoss classfilewriter to newer version working on JDK 12 (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2572&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2572&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix Probe functional tests on latest Firefox (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2579&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2579&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time around, the &lt;a href=&quot;http://download.jboss.org/weld/3.1.1.Final/wildfly-16.0.0.Final-weld-3.1.1.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 16.0.0.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.1.1.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12340657&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2019/02/06/weld-310Final/</id>
<title>Weld 3.1.0.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2019-02-06T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2019/02/06/weld-310Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.1.0.Final and Weld API 3.1.Final are now up for grabs. What&#8217;s in it for you?


There are quite a few new things in the mix - InterceptionFactory improvements, new API clases and methods, improvements to class defining for integrators in preparation for JDK 12.
We now also support CDI context propagation between threads; there is a whole new SPI that allows users and/or frameworks to propagate request, session or conversation contexts.
Last but no least, there are bug fixes, so let&#8217;s get right into it!





Note


Integrators (WildFly, Liberty, GlassFish, &#8230;&#8203;) will have to adjust to the changes made in SPI. Those are, most...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.1.0.Final and Weld API 3.1.Final are now up for grabs. What’s in it for you?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are quite a few new things in the mix - &lt;code&gt;InterceptionFactory&lt;/code&gt; improvements, new API clases and methods, improvements to class defining for integrators in preparation for JDK 12.
We now also support CDI context propagation between threads; there is a whole new SPI that allows users and/or frameworks to propagate request, session or conversation contexts.
Last but no least, there are bug fixes, so let’s get right into it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Integrators (WildFly, Liberty, GlassFish, …​) will have to adjust to the changes made in SPI. Those are, most notably, the removal of long deprecated methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2558&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2558&lt;/a&gt;) and reworked &lt;code&gt;ProxyServices&lt;/code&gt; which now delegate class defining responsibility to the integrator (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2556&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2556&lt;/a&gt;). This is crucial for Weld to operate on newer JDKs (12) and while Weld will work with the old approach for now, we will eventually fully swap to this new SPI.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld API/SPI&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added API to allow for CDI context propagation between threads (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2497&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2497&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New API class was introduced (&lt;code&gt;WeldAlterableContext&lt;/code&gt;), this class offers methods to manipulate context state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now propagate &lt;code&gt;Request&lt;/code&gt;, &lt;code&gt;Session&lt;/code&gt; and &lt;code&gt;Conversation&lt;/code&gt; contexts between threads as they all implement &lt;code&gt;WeldAlterableContext&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This comes with certain limitations and is mostly designed for frameworks which would do this for you (such as MicroProfile Concurrency) but anyone can use it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more information, please glance at &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html_single/#_propagating_built_in_contexts&quot;&gt;this part of Weld documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldManager&lt;/code&gt;, providing extra methods over what &lt;code&gt;BeanManager&lt;/code&gt; offers, is now an injectable bean (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2538&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2538&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldManager&lt;/code&gt; now offers new util methods allowing you to easily grab active contexts&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is mainly for the purpose of context propagation as it also allows you to grab all active contexts that support it&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldManager&lt;/code&gt; can now be used to check if any given context is active without having to care about exceptions (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2537&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2537&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added new SPI for class defining, deprecated old approach in &lt;code&gt;ProxyServices&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2556&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2556&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Integrators will have to implement this new API to be able to operate on JDK 12+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld now delegates class defining to integrators in order to avoid having to crack open &lt;code&gt;ClassLoader&lt;/code&gt; methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Previously, integrators provided &lt;code&gt;ClassLoader&lt;/code&gt; instance which Weld then used to invoke &lt;code&gt;defineClass()&lt;/code&gt; methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We now ask integrators to invoke those methods themselves while providing them with all the necessary bits for doing so&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove deprecated parts of API/SPI (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2558&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2558&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lots of unused and long deprecated methods were removed, should have no effect on code as those weren’t used anyway (most of them since Weld 3.0.0)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld will now log a &lt;code&gt;WARNING&lt;/code&gt; if you try to register an invalid qualifier (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2522&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2522&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now use &lt;code&gt;InterceptionFactory&lt;/code&gt; with an interface as a parameter (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2550&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2550&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2533&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2533&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This means the proxy class will be based off an interface which is by definition always proxyable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can therefore even supply an unproxyable implementation and it will still work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that this is experimental feature with some limitations to it, see &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html_single/#_loosening_the_limitations_of_literal_interceptionfactory_literal&quot;&gt;Weld docs&lt;/a&gt; for more details&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correct atomic behaviour in &lt;code&gt;RequestContextController&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2536&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2536&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix rare race condition in &lt;code&gt;ConcurrentValidator&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2545&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2545&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small correction to interceptor resolution when they have no bindings (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2521&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2521&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enforce consistent behaviour between &lt;code&gt;AnnotatedType&lt;/code&gt; and &lt;code&gt;WithAnnotations&lt;/code&gt; in regards to default methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2551&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2551&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All proxy-specific methods added by Weld now have more complex names to avoid (very rare) method clashes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2508&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2508&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lower logging level of &lt;code&gt;InterceptorLogger.unableToDetermineInterceptedBean()&lt;/code&gt; from &lt;code&gt;WARN&lt;/code&gt; to &lt;code&gt;INFO&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2546&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2546&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can now extend the set of bean defining annotations in Weld SE (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2523&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2523&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is handy for when you have discovery on and want custom beans automatically picked up while still avoiding the &lt;code&gt;all&lt;/code&gt; discovery mode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix bug in handling JAR dependencies added onto classpath where you could accidentally add more packages than desired (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2535&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2535&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correct &lt;code&gt;ALLOW_OPTIMIZED_CLEANUP&lt;/code&gt; configuration key value (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2547&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2547&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When running with &lt;code&gt;SecurityManager&lt;/code&gt; enabled, Weld will now refuse to use &lt;code&gt;ForkJoinPool&lt;/code&gt; for startup and will pick different pool instead (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2517&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2517&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe development tool&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure &lt;code&gt;ProbeExtension&lt;/code&gt; has priority over any other existing extensions (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2524&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2524&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stabilize testsuite and make sure dependencies are EE 8 based (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2519&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2519&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2553&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2553&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation has been updated to reflects EE 8 versions of servers (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2529&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2529&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documented all changes coming to Weld API in 3.1 update (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2540&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2540&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-enable SpotBugs code quality checking on JDK 11+ (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2544&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2544&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgraded WildFly Arquillian adapter to 2.1.1.Final (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2543&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2543&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Revisit testing on Jetty (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2528&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2528&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are now regularly testing with JDK 11 and looking into JDK 12 testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time around, the &lt;a href=&quot;http://download.jboss.org/weld/3.1.0.Final/wildfly-15.0.1.Final-weld-3.1.0.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 15.0.1.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.1.0.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12339977&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2018/09/26/weld-248Final/</id>
<title>Weld 2.4.8.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2018-09-26T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2018/09/26/weld-248Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 2 has entered maintenance mode with its 2.4.7.Final release earlier this year.
Now we are coming with a maintenance release containing fixes to several nuisances you might have come across.


Notable fixes and improvements:




Weld Core:



Opt-in enhancement in HTTP session replication, more eager approach (WELD-1130)



Note that WildFly does not need to use this





AfterTypeDiscovery did not allow to remove declared interceptors/decorators/alternatives correctly (WELD-2479)


Corrected decorator subclass creation when said decorator overrides only default method (WELD-2501)


Avoid optimizing self invocation of private methods in order to avoid IllegalAccessError(WELD-2506)


Allow interception of abstract, package-private classes with public methods (WELD-2507)


Fix interception of overriden generic methods invoked via superclass (WELD-2514)


Implement...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 2 has entered maintenance mode with its 2.4.7.Final release earlier this year.
Now we are coming with a maintenance release containing fixes to several nuisances you might have come across.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Opt-in enhancement in HTTP session replication, more eager approach (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-1130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-1130&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that WildFly does not need to use this&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AfterTypeDiscovery&lt;/code&gt; did not allow to remove declared interceptors/decorators/alternatives correctly (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2479&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2479&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corrected decorator subclass creation when said decorator overrides only default method (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2501&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2501&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid optimizing self invocation of private methods in order to avoid &lt;code&gt;IllegalAccessError&lt;/code&gt;(&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2506&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2506&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow interception of abstract, package-private classes with public methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2507&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2507&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix interception of overriden generic methods invoked via superclass (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2514&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2514&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement reflection fallback for qualifier loading when there are multiple instances of the class in the deployment (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2531&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2531&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed possible race condition appearing during bean index creation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2532&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2532&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fix NPE which could occur if trying to intercept a method called by constructor (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2473&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2473&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2478&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2478&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Correction to licenses in Probe (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2480&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2480&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.8.Final/wildfly-11.0.0.Final-weld-2.4.8.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 11.0.0.Final&lt;/a&gt; is available.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.8.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12337222&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2018/07/26/weld-305Final/</id>
<title>Weld 3.0.5.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2018-07-26T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2018/07/26/weld-305Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.0.5.Final is here and hand in hand with it comes Weld API 3.0.SP4.
And in case you missed it, there was CDI 2.0.SP1 release as well.
It comes with few security manager related fixes and Weld is of course compliant with it.
If you are running on a servlet or in SE, you may need to update it yourself, in case of EE it usually falls to the server to update this dependency for you.





Note


This time around we are not providing a patch for WildFly 13 as there were major changes blocking us from doing so.
However, Wildfly 14 will contain all of...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.0.5.Final is here and hand in hand with it comes Weld API 3.0.SP4.
And in case you missed it, there was &lt;a href=&quot;https://search.maven.org/#artifactdetails%7Cjavax.enterprise%7Ccdi-api%7C2.0.SP1%7Cjar&quot;&gt;CDI 2.0.SP1 release&lt;/a&gt; as well.
It comes with few &lt;a href=&quot;https://issues.jboss.org/issues/?jql=project%20%3D%20CDI%20AND%20fixVersion%20%3D%202.0.SP1&quot;&gt;security manager related fixes&lt;/a&gt; and Weld is of course compliant with it.
If you are running on a servlet or in SE, you may need to update it yourself, in case of EE it usually falls to the server to update this dependency for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This time around we are not providing a patch for WildFly 13 as there were major changes blocking us from doing so.
However, Wildfly 14 will contain all of the above updates - Weld core, Weld API, CDI API - so keep an eye out for its release!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As for updates and fixes, we keep looking at JDK 11 and have done another round of fixing to keep up with adjustments and removals going on in JDK.
There is a bunch of interceptor/decorator fixes for those of you who indulge in using complex class hierarchies with abstractions, generics and default methods.
So let’s take a look at them all, shall we?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed possible race condition appearing during bean index creation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2492&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2492&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid creating unnecessary bean metatada for anonymous and local classes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2498&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2498&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corrected decorator subclass creation when said decorator overrides only default method (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2501&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2501&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid optimizing self invocation of private methods in order to avoid &lt;code&gt;IllegalAccessError&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2506&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2506&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow interception of abstract, package-private classes with public methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2507&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2507&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix interception of overriden generic methods invoked via superclass (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2514&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2514&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement reflection fallback for qualifier loading when there are multiple instances of the class in the deployment (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2250&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2250&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make conversation ID parameter detection more robust (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2512&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2512&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make default &lt;code&gt;StartMain&lt;/code&gt; more container friendly by exiting with error code should an exception appear (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2502&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2502&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is also a follow-up custom exception handling proposal if you want to glance at it (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2503&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2503&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix possible NPE coming from &lt;code&gt;beans.xml&lt;/code&gt; merging in complex Weld SE deployment scenarios (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2515&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2515&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK 9/10 and onwards&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldProvider&lt;/code&gt; moved to servlet core module to align it with how Jigsaw handles services (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2435&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2435&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed SE/Servlet resource loading behavior when &lt;code&gt;ForkJoinPool&lt;/code&gt; is used on JDK 9+ (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2494&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2494&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review executability of Weld examples on JDK 10+ (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2495&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2495&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update to JBoss Classfilewriter 1.2.3.Final which is JDK 11 compliant (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2509&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2509&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If running in JPMS, remove dependency on &lt;code&gt;java.desktop&lt;/code&gt; to shrink the footprint (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2504&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2504&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe development tool&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Probe now recognizes &lt;code&gt;BeforeDestroyed&lt;/code&gt; event (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2500&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2500&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We are now looking at testing Weld with JDK 11 on a regular basis and have taken steps to ensure it works (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2516&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2516&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated patching profiles for Weld 3 and WFLY, the process is now more automated and configurable (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2491&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2491&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OSGi bundle now import BCEL only optionally (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2499&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2499&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.5.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12337420&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2018/07/10/weld-team-changes/</id>
<title>Weld team changes</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2018-07-10T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2018/07/10/weld-team-changes/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="team"></category>
<summary>
I&#8217;m pleased to announce a couple of changes coming to the Weld team.


First of all, Matěj Novotný will be taking over the leadership of the project.
Matěj has proven himself to be an excellent engineer, contributing not only to Weld projects but also to the CDI specification and TCK development.
I&#8217;m really happy that I can hand over the leadership to this guy!


Matěj&#8217;s primary task is leading the project towards "Java 11 world" and to meet the other challenges such as reactive programming model enhancements.


Secondly, Nikoleta Žiaková is joining the team as a quality engineer.
She’s going to work on expanding our testsuites...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m pleased to announce a couple of changes coming to the Weld team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, &lt;a href=&quot;https://github.com/manovotn&quot;&gt;Matěj Novotný&lt;/a&gt; will be taking over the leadership of the project.
Matěj has proven himself to be an excellent engineer, contributing not only to Weld projects but also to the CDI specification and TCK development.
I’m really happy that I can hand over the leadership to this guy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matěj’s primary task is leading the project towards &quot;Java 11 world&quot; and to meet the other challenges such as reactive programming model enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Secondly, &lt;a href=&quot;https://github.com/nziakova&quot;&gt;Nikoleta Žiaková&lt;/a&gt; is joining the team as a quality engineer.
She’s going to work on expanding our testsuites and improving our continuous integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, I’m not going to leave the project but stay as a contributor focused on related technologies such as &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt;, &lt;a href=&quot;https://github.com/thorntail/thorntail&quot;&gt;Thorntail&lt;/a&gt; and MicroProfile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Martin&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2018/04/26/weld-304Final/</id>
<title>Weld 3.0.4.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2018-04-26T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2018/04/26/weld-304Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.0.4.Final is here along with Weld API 3.0.SP3 - make sure you update both.


In this release we took first steps towards eliminating illegal access in JDK 10+.
The good news is, Weld should now be able to run with --illegal-access=deny.
The project and CI infrastructure around it went through a lot of changes to be able to build and execute on JDK 10 and there is still more to come.
There are also numerous optimizations - beans.xml parsing, AT identifier representation, optional memory savings.
And of course, bug fixes, so let us take a look at all of it.


Noticeable amount of reports, suggestions...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.0.4.Final is here along with Weld API 3.0.SP3 - make sure you update both.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release we took first steps towards eliminating illegal access in JDK 10+.
The good news is, Weld should now be able to run with &lt;code&gt;--illegal-access=deny&lt;/code&gt;.
The project and CI infrastructure around it went through a lot of changes to be able to build and execute on JDK 10 and there is still more to come.
There are also numerous optimizations - &lt;code&gt;beans.xml&lt;/code&gt; parsing, AT identifier representation, optional memory savings.
And of course, bug fixes, so let us take a look at all of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Noticeable amount of reports, suggestions and even fixes came from the community - for that you have our thanks (and a new version of Weld of course)!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Correct proxy generation for class hierarchy with abstract class and generics (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2470&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Opt-in enhancement in HTTP session replication, more eager approach (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-1130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-1130&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that WildFly does not need or use this&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix NPE which could occur with &lt;code&gt;SecurityManager&lt;/code&gt; if &lt;code&gt;getPermissions()&lt;/code&gt; returned &lt;code&gt;null&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2464&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2464&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relax bean type check in &lt;code&gt;BeanManager.getInjectableReference()&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2466&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2466&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AfterTypeDiscovery&lt;/code&gt; did not allow to remove declared interceptors/decorators/alternatives correctly (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2479&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2479&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two globally selected alternatives with the same priority should result in ambiguous dependency (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2482&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2482&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Configurator&lt;/code&gt; SPI now uses sensible &lt;code&gt;toString()&lt;/code&gt; so that user can tell what went wrong (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2484&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2484&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve performance of &lt;code&gt;beans.xml&lt;/code&gt; parsing (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2469&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2469&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduce an optional configuration allowing Weld to perform cleanup after boot (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2457&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2457&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2475&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2475&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In EE servers, if integrators meet certain conditions and allow for this, Weld can them drop metadata from some beans which will not be used in runtime&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See &lt;em&gt;Docs&lt;/em&gt; section for links&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optimise &lt;code&gt;String&lt;/code&gt; representation of &lt;code&gt;AnnotatedTypeIdentifier&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2477&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2477&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fix NPE which could occur if trying to intercept a method called by constructor (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2478&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2478&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2473&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2473&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK 9/10 and onwards (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2460&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2460&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld uses JDK’s internal BCEL classes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2490&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2490&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is only used to report errors in generated bytecode on proxies/subclasses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We added a dependency on &lt;code&gt;org.apache.bcel:bcel&lt;/code&gt; which enables this functionality without reflective access to internal libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In order to keep Weld’s footprint minimal, this dependency is optional only&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade JBoss Classfilewriter to 1.2.2.Final (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2487&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2487&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eliminates another bunch of illegal access problems&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe development tool&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Probe now uses JDK-agnostic &lt;code&gt;Annotation.toString()&lt;/code&gt; version (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2463&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2463&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correction to licences in Probe (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2480&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2480&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docs&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldTerminalListener&lt;/code&gt; had wrong FQCN in our documentation which resulted in errors when trying to use it in Tomcat (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2486&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2486&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Newly added memory-saving option &lt;code&gt;ConfigurationKey.ALLOW_OPTIMIZED_CLEANUP&lt;/code&gt; is documented (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2472&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2472&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you wish to learn more, please glance &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.4.Final/en-US/html_single/#remove-unused-beans&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please note that integrator has to allow for this optimization, otherwise your settings won’t count (&lt;em&gt;psst, WildFly 12 allows this!&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.4.Final/wildfly-12.0.0.Final-weld-3.0.4.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 12.0.0.Final&lt;/a&gt; is available.
Please note that Weld 3.0.4.Final will still allow you to boot up WildFly in either EE 7 or EE 8 mode, whichever you prefer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If this is the first time you hear about EE 8 mode for WildFly, check &lt;a href=&quot;http://wildfly.org/news/2018/02/28/WildFly12-Final-Released&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.4.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12336871&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2018/03/20/weld-247Final/</id>
<title>Weld 2.4.7.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2018-03-20T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2018/03/20/weld-247Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 2.4.7.Final is now available.
It includes multiple important bugfixes, many of them focused around proxy generation and/or invocation.





Note


Weld 2.4 now enters maintenance mode - there will be no further active development on Weld 2. We will be channeling our efforts into Weld 3 instead.





Notable fixes and improvements:




Weld Core:



Proxy-related issues:



Fixed possible NPE with multiple deployments one of which uses relaxed construction configuration (WELD-2448)


BeanManager.getInjectableReference was using unnecessarily strict checks for proxyability (WELD-2466)


Proxy serialization is now container agnostic (WELD-2447)


Fix invocation of private observer method (WELD-2443)



This only applies to private observer method which is not intercepted but is declared on a bean which has...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 2.4.7.Final is now available.
It includes multiple important bugfixes, many of them focused around proxy generation and/or invocation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Weld 2.4 now enters maintenance mode - there will be no further active development on Weld 2. We will be channeling our efforts into Weld 3 instead.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Proxy-related issues:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed possible NPE with multiple deployments one of which uses &lt;code&gt;relaxed construction&lt;/code&gt; configuration (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2448&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2448&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BeanManager.getInjectableReference&lt;/code&gt; was using unnecessarily strict checks for proxyability (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2466&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2466&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proxy serialization is now container agnostic (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2447&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2447&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix invocation of private observer method (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2443&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2443&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This only applies to private observer method which is not intercepted but is declared on a bean which has some other intercepted methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correct proxy generation for class hierarchy with abstract class and generics (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2470&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other issues:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Minor optimization in internal structures of &lt;code&gt;InterceptionModel&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2455&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2455&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve exception logging for &lt;code&gt;DeploymentException&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2453&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2453&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prevent NPE if &lt;code&gt;ProtectionDomain.getPermissions()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2464&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2464&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fields in &lt;code&gt;org.jboss.weld.environment.se.Weld&lt;/code&gt; are now &lt;code&gt;protected&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2451&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2451&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow to register custom &lt;code&gt;BeanArchiveHandler&lt;/code&gt; using &lt;code&gt;ServiceLoader&lt;/code&gt; mechanism (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2450&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2450&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This applies to SE and Servlet environments&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With OSGi, &lt;code&gt;javax.ejb&lt;/code&gt; is now imported optionally (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2458&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2458&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld now uses SpotBugs (a successor to FindBugs) (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2462&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2462&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;module-info&lt;/code&gt;, if present, is now correctly ignored during bean discovery phase (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2459&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2459&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.7.Final/wildfly-11.0.0.Final-weld-2.4.7.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 11.0.0.Final&lt;/a&gt; is available.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.7.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12336351&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2018/02/09/weld-303Final/</id>
<title>Weld 3.0.3.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2018-02-09T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2018/02/09/weld-303Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
How do you cook Weld 3.0.3.Final?
You start with a speck of bug fixes add some proxy generation improvements top it off with adjustments for integrators.


Notable fixes and improvements:




Weld Core



Fixed invocation of private observer method in some very specific cases (WELD-2443)


Container agnostic proxy serialization (WELD-2447)


Improve shared proxy class instantiation for multiple deployments with relaxed construction enabled (WELD-2448)


beans_1_1.xsd is now known to Weld once again (WELD-2445)


module-info is now ignored during discovery and won&#8217;t give you warnings in log (WELD-2459)


Enhanced logging of DeploymentException, it should now be possible to glance more from suppressed exceptions (WELD-2453)





Weld SE &amp;&amp; Servlet



You can now register additional BeanArchiveHandler...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How do you cook Weld 3.0.3.Final?
You start with a speck of bug fixes add some proxy generation improvements top it off with adjustments for integrators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed invocation of private observer method in some very specific cases (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2443&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2443&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Container agnostic proxy serialization (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2447&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2447&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve shared proxy class instantiation for multiple deployments with relaxed construction enabled (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2448&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2448&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;beans_1_1.xsd&lt;/code&gt; is now known to Weld once again (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2445&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2445&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;module-info&lt;/code&gt; is now ignored during discovery and won’t give you warnings in log (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2459&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2459&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhanced logging of &lt;code&gt;DeploymentException&lt;/code&gt;, it should now be possible to glance more from suppressed exceptions (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2453&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2453&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE &amp;amp;&amp;amp; Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can now register additional &lt;code&gt;BeanArchiveHandler&lt;/code&gt; via &lt;code&gt;ServiceLoader&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2450&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2450&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multitude of fields/method in &lt;code&gt;Weld&lt;/code&gt; SE builder are now &lt;code&gt;protected&lt;/code&gt; and hence extendable (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2451&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2451&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improvements in documentation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2449&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2449&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld project now uses SpotBugs instead of FindBugs (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2462&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2462&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OSGi now requires &lt;code&gt;javax.ejb&lt;/code&gt; only optionally (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2458&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2458&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, there is a &lt;a href=&quot;http://download.jboss.org/weld/3.0.3.Final/wildfly-11.0.0.Final-weld-3.0.3.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 11.0.0.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.3.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12336197&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/12/19/weld-meets-junit5/</id>
<title>Weld meets JUnit 5</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-12-19T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/12/19/weld-meets-junit5/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="junit"></category>
<category term="testing"></category>
<category term="weld-se"></category>
<summary>
Contents

GAV Coordinates
First Steps
Dude, Where Is My Container?
Help, I Am Stuck With JUnit 4
What If I Would Like To&#8230;&#8203;



In this article I want to bring weld-junit into light.
You might have heard about or, better still, used our extension for JUnit 4 which has been around for some time now.
But after getting ourselves acquainted with JUnit 5, we decided we should create another one for JUnit 5.
In the sections below I will try to introduce the basic usage and ideas behind it, for more in depth information, you can glance the readme file residing directly in the repository.


GAV Coordinates


Here are group and...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_gav_coordinates&quot;&gt;GAV Coordinates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_first_steps&quot;&gt;First Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_dude_where_is_my_container&quot;&gt;Dude, Where Is My Container?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_help_i_am_stuck_with_junit_4&quot;&gt;Help, I Am Stuck With JUnit 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_what_if_i_would_like_to&quot;&gt;What If I Would Like To…​&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article I want to bring &lt;a href=&quot;https://github.com/weld/weld-junit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;weld-junit&lt;/a&gt; into light.
You might have heard about or, better still, used our extension for JUnit 4 which has been around for some time now.
But after getting ourselves acquainted with JUnit 5, we decided we should create another one for JUnit 5.
In the sections below I will try to introduce the basic usage and ideas behind it, for more in depth information, you can glance the &lt;a href=&quot;https://github.com/weld/weld-junit/blob/master/junit5/README.md&quot;&gt;readme file&lt;/a&gt; residing directly in the repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gav_coordinates&quot;&gt;GAV Coordinates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are group and artifact IDs you need to grab the artifact for Maven projects:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.jboss.weld&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;weld-junit-parent&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${weld.junit.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_first_steps&quot;&gt;First Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use the extension as you would any other in JUnit 5, via &lt;code&gt;@ExtendWith&lt;/code&gt; from JUnit library along with the name of our extension - &lt;code&gt;org.jboss.weld.junit5.WeldJunit5Extension&lt;/code&gt;.
Alternatively, there is a shorter annotation &lt;code&gt;@org.jboss.weld.junit5.EnableWeld&lt;/code&gt;.
Both of these can be used on class and method level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hence your test could look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@EnableWeld
public class InjectionWithWeldTest {

  @Inject
  BarBean beanAsField;

  @Test
  public void testThatItWorks(FooBean beanAsParam) {
    assertNotNull(beanAsParam);
    beanAsParam.ping();
    assertNotNull(beanAsField);
    beanAsField.ping();
  }

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Behind the scenes, Weld will bootstrap SE container for each test container invocation and tear it down afterwards (works for both, per-method and per-class lifecycle).
As you might have guessed, Weld will also automatically inject into any fields within the test class which you annotated with &lt;code&gt;@Inject&lt;/code&gt;.
Furthermore, it will attempt to resolve parameters in your test methods in very much the same way.
But beware, by default Weld will only scan classes from within the test package!
With this in mind, you can play around with beans to your liking.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_dude_where_is_my_container&quot;&gt;Dude, Where Is My Container?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good point, when working with Weld SE you normally have the power to customize container bootstrap and, once running, to query it for beans, fire events and so on.
And you shall retain that right!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only you are going to need a public field with type &lt;code&gt;org.jboss.weld.junit5.WeldInitiator&lt;/code&gt; which you annotate with &lt;code&gt;@org.jboss.weld.junit5.WeldSetup&lt;/code&gt;.
This class has a bunch of static method which will allow you to customize the boostrap and it also works as a handle to grasp the &lt;code&gt;WeldContainer&lt;/code&gt; running below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Too much talk, not enough code, so here we go:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@ExtendWith(WeldJUnit5Extension.class)
public class WeldJUnit5CustomizedTest {

  @WeldSetup
  public WeldInitiator weld = WeldInitiator.of(WeldInitiator.createWeld()
                                           .alternatives(FooAlternative.class)
                                           .beanClasses(Foo.class, FooAlternative.class)
                                           .enableInterceptors(MyInterceptor.class));

  @Inject
  Foo bean; // this will be FooAlternative in the end

  @Test
  public void testWeldContainerUsage() {
    weld.event().select(MyPayload.class).fire(new MyPayload());
    weld.select(Foo.class).isResolvable();
  }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_help_i_am_stuck_with_junit_4&quot;&gt;Help, I Am Stuck With JUnit 4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No problems, we got you covered, check out our &lt;a href=&quot;https://github.com/weld/weld-junit/blob/master/junit4/README.md&quot;&gt;JUnit 4 extension&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They are both very similar and easy to master.
The only notable difference is that in JUnit 4 you always need the initiator class - &lt;code&gt;org.jboss.weld.junit4.WeldInitiator&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_if_i_would_like_to&quot;&gt;What If I Would Like To…​&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re stuck and need a helping hand, we are listening on the usual channels - mailing list, Stack Overflow, Gitter, IRC, GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It might also be the case that we forgot about something quite important, so don’t hesitate to reach to us through those channels, or open a GitHub issue straight away.
We are happy for any kind of feedback we can get.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/12/18/weld-246Final/</id>
<title>Weld 2.4.6.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-12-18T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/12/18/weld-246Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Time has come for another round of Weld 2.4 bugfix release.
But that&#8217;s not all - this time there is also new API to go along with this release - Weld API 2.4.SP2.


Among other things you can now obtain interceptor binding from javax.interceptor.InvocationContext, use enriched version of javax.enterprise.event.Event or select javax.enterprise.inject.Instance based on java.lang.reflect.Type.


Notable fixes and improvements:




Weld Core:



Improved subclass generation mechanism for generic interceptors (WELD-2414)


Corrected proxy creation for signed classes (WELD-2425)


Correct InjectionPoint bean behaviour when used within AfterBeanDiscovery observer (WELD-2429)





Weld SE



There are now multiple convenient error-proof methods to quickly configure SE container (WELD-2426)



Weld.enableDevMode(), Weld.scanClasspathEntries(), &#8230;&#8203;








Weld API/SPI



WeldInstance has several improvements



It now allows...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Time has come for another round of Weld 2.4 bugfix release.
But that’s not all - this time there is also new API to go along with this release - Weld API 2.4.SP2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Among other things you can now obtain interceptor binding from &lt;code&gt;javax.interceptor.InvocationContext&lt;/code&gt;, use enriched version of &lt;code&gt;javax.enterprise.event.Event&lt;/code&gt; or select &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt; based on &lt;code&gt;java.lang.reflect.Type&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved subclass generation mechanism for generic interceptors (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2414&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2414&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corrected proxy creation for signed classes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2425&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2425&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correct &lt;code&gt;InjectionPoint&lt;/code&gt; bean behaviour when used within &lt;code&gt;AfterBeanDiscovery&lt;/code&gt; observer (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2429&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2429&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are now multiple convenient error-proof methods to quickly configure SE container (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2426&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2426&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Weld.enableDevMode()&lt;/code&gt;, &lt;code&gt;Weld.scanClasspathEntries()&lt;/code&gt;, …​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld API/SPI&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldInstance&lt;/code&gt; has several improvements&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It now allows you to &lt;code&gt;select()&lt;/code&gt; beans based on &lt;code&gt;java.lang.reflect.Type&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2427&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2427&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldInstance.Handler&lt;/code&gt; had become lazy which means you can now iterate/filter/sort &lt;code&gt;WeldInstance&lt;/code&gt; without actually instantiating beans (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2258&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2258&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is new interface in the API - &lt;code&gt;WeldEvent&lt;/code&gt; - which can be used in place of well known &lt;code&gt;Event&lt;/code&gt; but allows you narrow down event type by using &lt;code&gt;select()&lt;/code&gt; with &lt;code&gt;java.lang.reflect.Type&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2427&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2427&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API now contains &lt;code&gt;WeldInvocationContext&lt;/code&gt;, an enriched version of &lt;code&gt;javax.interceptor.InvocationContext&lt;/code&gt; which allows to obtain interceptor binding (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2433&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2433&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is also a &lt;code&gt;String&lt;/code&gt; key used to obtain interceptors binding directly from &lt;code&gt;InvocationContext&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2436&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2436&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In order to learn more, please refer to (&lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html_single/#_enhanced_version_of_literal_javax_interceptor_invocationcontext_literal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;our documentation&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Probe - fixed NPE which might occur when bean had &lt;code&gt;@Priority&lt;/code&gt; but no other annotation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2432&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2432&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the API changes should now be documented within Weld docs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.6.Final/wildfly-11.0.0.Final-weld-2.4.6.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 11.0.0.Final&lt;/a&gt; is available.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.6.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?version=12334958&amp;amp;styleName=Html&amp;amp;projectId=12310891&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/11/23/weld-302Final/</id>
<title>Weld 3.0.2.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-11-23T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/11/23/weld-302Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.0.2.Final is out and targetting WildFly 11!
Ever wished you could select events and instances in a truly generic way using just java.lang.reflect.Type?
Looking for easier way to configure SE container?
We have a bunch of bugfixes and improvements for you, so read on&#8230;&#8203;


Notable fixes and improvements:




Weld Core



Improved subclass generation mechanism for generic interceptors (WELD-2414)


Fixed OSGi bundling, we missed out one package on last release (WELD-2421)


Improved behaviour with no-interface EJB view with non-public methods (WELD-2430)


Corrected proxy creation for signed classes (WELD-2425)





Weld SE



There are now multiple convenient error-proof methods to quickly configure SE container (WELD-2426)



Weld.enableDevMode(), Weld.scanClasspathEntries(), &#8230;&#8203;








Weld API/SPI



WeldInstance has several improvements



It now allows...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.0.2.Final is out and targetting WildFly 11!
Ever wished you could select events and instances in a truly generic way using just &lt;code&gt;java.lang.reflect.Type&lt;/code&gt;?
Looking for easier way to configure SE container?
We have a bunch of bugfixes and improvements for you, so read on…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved subclass generation mechanism for generic interceptors (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2414&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2414&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed OSGi bundling, we missed out one package on last release (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2421&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2421&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved behaviour with no-interface EJB view with non-public methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2430&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2430&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corrected proxy creation for signed classes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2425&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2425&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are now multiple convenient error-proof methods to quickly configure SE container (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2426&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2426&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Weld.enableDevMode()&lt;/code&gt;, &lt;code&gt;Weld.scanClasspathEntries()&lt;/code&gt;, …​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld API/SPI&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldInstance&lt;/code&gt; has several improvements&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It now allows you to &lt;code&gt;select()&lt;/code&gt; beans based on &lt;code&gt;java.lang.reflect.Type&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2427&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2427&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldInstance.Handler&lt;/code&gt; had become lazy which means you can now iterate/filter/sort &lt;code&gt;WeldInstance&lt;/code&gt; without actually instantiating beans (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2258&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2258&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is new interface in the API - &lt;code&gt;WeldEvent&lt;/code&gt; - which can be used in place of well known &lt;code&gt;Event&lt;/code&gt; but allows you narrow down event type by using &lt;code&gt;select()&lt;/code&gt; with &lt;code&gt;java.lang.reflect.Type&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2427&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2427&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API now contains a &lt;code&gt;String&lt;/code&gt; key used to obtain interceptors binding from &lt;code&gt;InvocationContext&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2436&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2436&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Probe now correctly recognizes beans which have &lt;code&gt;@Priority&lt;/code&gt; but aren’t alternatives (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2432&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2432&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple documentation improvements regarding all things, old and new (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2440&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2440&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2431&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2431&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2434&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2434&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, there is a &lt;a href=&quot;http://download.jboss.org/weld/3.0.2.Final/wildfly-11.0.0.Final-weld-3.0.2.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 11.0.0.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.2.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12335442&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/09/11/weld-245Final/</id>
<title>Weld 2.4.5.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-09-11T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/09/11/weld-245Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
It&#8217;s about time we delivered another regular bugfix release for Weld 2.
And while the list of fixes isn&#8217;t exhausting, some of them are quite crucial.


Notable fixes and improvements:




Weld Core:



Revise Java 8 default methods plus proxies/sublasing behaviour (WELD-2407 and WELD-2405)


All POMs in Weld core project should now have correct MIME types; this corrects issues with Nexus 3 (WELD-2417)


Proxies for signed packages should now be generated in custom packages (WELD-2402)


The behaviour of Weld Core and integrator provided implementation of org.jboss.weld.bootstrap.api.Environment is back to what it was in Weld 2.4.3.Final (WELD-2401)



We found out this change could cause serious headaches to integrators so we...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s about time we delivered another regular bugfix release for Weld 2.
And while the list of fixes isn’t exhausting, some of them are quite crucial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Revise Java 8 default methods plus proxies/sublasing behaviour (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2407&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2407&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2405&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2405&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All POMs in Weld core project should now have correct MIME types; this corrects issues with Nexus 3 (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2417&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2417&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proxies for signed packages should now be generated in custom packages (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2402&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2402&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The behaviour of Weld Core and integrator provided implementation of &lt;code&gt;org.jboss.weld.bootstrap.api.Environment&lt;/code&gt; is back to what it was in Weld 2.4.3.Final (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2401&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2401&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We found out this change could cause serious headaches to integrators so we will leave it as it is - sorry for the mess&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Weld 3, we already have a better solution in &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2398&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;place&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE and Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Both, Weld SE and Weld Servlet, will now explicitly bring in dependency on jboss-classfilewriter 1.2+ (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2406&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2406&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Under the &lt;code&gt;jboss-as&lt;/code&gt; directory of Weld source code, you can now make use of new profiles to create WildFly patches yourself &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2397&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2397&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.5.Final/wildfly-10.1.0.Final-weld-2.4.5.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 10.1.0.Final&lt;/a&gt; is available.
But since WildFly 11 has already reached CR stage, we have decided to also provide you with &lt;a href=&quot;http://download.jboss.org/weld/2.4.5.Final/wildfly-11.0.0.CR1-weld-2.4.5.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 11.0.0.CR1&lt;/a&gt;.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.5.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?version=12334958&amp;amp;styleName=Html&amp;amp;projectId=12310891&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/08/25/weld-301Final/</id>
<title>Weld 3.0.1.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-08-25T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/08/25/weld-301Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Weld 3.0.1.Final is out and it brings some bugfixes as well as new version of Weld API - 3.0.SP1.
Among the new things you can find sweet stuff such as an expansion to CDI 2 BeanConfigurator API or the ability to detect that injected object is Weld proxy.
Wait, not only detect - you can also use it do get Metadata or even retrieve the actual contextual instance hidden beneath.
So let&#8217;s see the summary of fixes and improvements, shall we?


Notable fixes and improvements:




Weld Core



Revised support for Java 8 default methods (WELD-2407 and WELD-2405)


Corrected MIME types for all POMs in Weld core -...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.0.1.Final is out and it brings some bugfixes as well as new version of Weld API - 3.0.SP1.
Among the new things you can find sweet stuff such as an expansion to CDI 2 &lt;code&gt;BeanConfigurator&lt;/code&gt; API or the ability to detect that injected object is Weld proxy.
Wait, not only detect - you can also use it do get &lt;code&gt;Metadata&lt;/code&gt; or even retrieve the actual contextual instance hidden beneath.
So let’s see the summary of fixes and improvements, shall we?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Revised support for Java 8 default methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2407&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2407&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2405&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2405&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corrected MIME types for all POMs in Weld core - Nexus 3 will love us now! (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2417&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2417&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed how proxies are created for signed packages (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2402&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2402&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Portable extension events should now be fired in accordance with specification &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2393&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2393&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Synthetic bean archive can now have discovery mode &lt;code&gt;annotated&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2386&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2386&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added a convenient static method &lt;code&gt;WeldContainer.current()&lt;/code&gt; allowing you to quickly grab your running instance (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2399&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2399&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed a glitch when starting SE container and adding packages via &lt;code&gt;Weld.addPackages()&lt;/code&gt; &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2395&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2395&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld API/SPI&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added a way to detect proxies and subclasses (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2407&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2407&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Every Weld-enhanced object (subclass/proxy) will now implement &lt;a href=&quot;https://github.com/weld/api/tree/3.0.SP1/weld/src/main/java/org/jboss/weld/proxy&quot;&gt;new marker interface(s)&lt;/a&gt; which grant access to additional data about the bean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This also allows to retrieve the underlying contextual instance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added &lt;code&gt;WeldBeanConfigurator&lt;/code&gt; to API - allows to select an &lt;code&gt;@Alternative&lt;/code&gt; which was created using &lt;code&gt;BeanConfigurator&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2412&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2412&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have enhanced the &lt;code&gt;Environment&lt;/code&gt; in Weld SPI so that integrators define whether their bean archives are &quot;EE module aware&quot; or not (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2398&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2398&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Under the &lt;code&gt;jboss-as&lt;/code&gt; directory of Weld source code, you can now make use of new profiles to create WildFly patches yourself &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2397&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2397&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To learn more about this, please refer to the &lt;a href=&quot;https://github.com/weld/core/blob/3.0.1.Final/README.md#creating-a-patch-file-for-wildfly&quot;&gt;&lt;code&gt;README&lt;/code&gt; file in our repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE and Weld Servlet now explicitly depends on &lt;code&gt;jboss-classfilewriter&lt;/code&gt; in version 1.2+ &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2406&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2406&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, there is a &lt;a href=&quot;http://download.jboss.org/weld/3.0.1.Final/wildfly-10.1.0.Final-weld-3.0.1.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 10.1.0.Final&lt;/a&gt; is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But, for those of you who like to stay sharp, we have also created a &lt;a href=&quot;http://download.jboss.org/weld/3.0.1.Final/wildfly-11.0.0.Beta1-weld-3.0.1.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly 11.0.0.Beta1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that there is currently a &lt;a href=&quot;https://issues.jboss.org/browse/WFLY-9240&quot;&gt;known issue&lt;/a&gt; with security context propagation in Weld 3 for WildFly 11.
Though this should only concern people who use the combination of Elytron subsystem and asynchronous CDI events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.1.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12334698&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/08/07/weld-vertx-next/</id>
<title>Weld Vert.x Next?</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-08-07T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/08/07/weld-vertx-next/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="vertx"></category>
<category term="integration"></category>
<summary>
Contents

What Is It Good For?

Modules


How Do I Use It In My Vert.x Webapp?

1. Project Configuration
2. Start CDI Container
3. Observe Events
4. Declare Routes
5. Enjoy and Celebrate


Future and Plans



Last year Weld team announced the weld-vertx project (see also Weld meets Vert.x and Update on weld-vertx articles).
The goal was clear - bring the CDI programming model into the Vert.x ecosystem.
Since then, several things have changed.
Two new modules were added, CDI 2 and Weld 3 is now used by default, and two final versions were released.
I think it&#8217;s a good time to summarize the features and plans for future.


What Is It Good For?


First of...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_what_is_it_good_for&quot;&gt;What Is It Good For?&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_modules&quot;&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_how_do_i_use_it_in_my_vert_x_webapp&quot;&gt;How Do I Use It In My Vert.x Webapp?&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_1_project_configuration&quot;&gt;1. Project Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_2_start_cdi_container&quot;&gt;2. Start CDI Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_3_observe_events&quot;&gt;3. Observe Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_4_declare_routes&quot;&gt;4. Declare Routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_5_enjoy_and_celebrate&quot;&gt;5. Enjoy and Celebrate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_future_and_plans&quot;&gt;Future and Plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last year Weld team announced the &lt;a href=&quot;https://github.com/weld/weld-vertx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;weld-vertx&lt;/a&gt; project (see also &lt;a href=&quot;https://weld.cdi-spec.org/news/2016/04/11/weld-meets-vertx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Weld meets Vert.x&lt;/a&gt; and &lt;a href=&quot;https://weld.cdi-spec.org/news/2016/06/21/update-on-weld-vertx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Update on weld-vertx&lt;/a&gt; articles).
The goal was clear - bring the CDI programming model into the Vert.x ecosystem.
Since then, several things have changed.
Two new modules were added, &lt;strong&gt;CDI 2&lt;/strong&gt; and &lt;strong&gt;Weld 3&lt;/strong&gt; is now used by default, and &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cweld-vertx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;two final versions&lt;/a&gt; were released.
I think it’s a good time to summarize the features and plans for future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_it_good_for&quot;&gt;What Is It Good For?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, it offers a mature component model for business logic in your Vert.x applications.
A reasonable component model helps making your applications maintainable and scalable in terms of development and reusability.
So the primary intention is to &lt;em&gt;implement the business logic as CDI beans and use Vert.x APIs for everything else&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_modules&quot;&gt;Modules&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far there are four modules available:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Core&lt;/em&gt; module starts/stops the Weld SE container and to notifies CDI observer methods when a message is sent via Vert.x event bus. Also you can inject &lt;code&gt;io.vertx.core.Vertx&lt;/code&gt; and &lt;code&gt;io.vertx.core.Context&lt;/code&gt; in any CDI bean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Web&lt;/em&gt; module allows to configure the router (a component responsible to find the &quot;logic&quot; to handle an HTTP request) in a declarative way, using &lt;code&gt;@org.jboss.weld.vertx.web.WebRoute&lt;/code&gt; annotation. Of course, you can register routes programatically. But what if there are hundreds of routes? The more complicated the REST API is the more difficult it is to maintain the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Service Proxy&lt;/em&gt; module makes it possible to inject and invoke service proxies (as defined in &lt;a href=&quot;https://github.com/vert-x3/vertx-service-proxy&quot; class=&quot;bare&quot;&gt;https://github.com/vert-x3/vertx-service-proxy&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Probe&lt;/em&gt; module enables Weld Probe development tool in a Vert.x application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_do_i_use_it_in_my_vert_x_webapp&quot;&gt;How Do I Use It In My Vert.x Webapp?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s enhance an existing webapp in four simple steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_1_project_configuration&quot;&gt;1. Project Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jus add the following dependency to your &lt;code&gt;pom.xml&lt;/code&gt; and &lt;a href=&quot;https://github.com/weld/weld-vertx/blob/master/examples/hello/src/main/resources/META-INF/beans.xml&quot;&gt;beans.xml&lt;/a&gt; into &lt;code&gt;src/main/resources/META-INF&lt;/code&gt; (this will enable CDI).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.jboss.weld.vertx&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;weld-vertx-web&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${version.weld-vertx}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This also brings in &lt;code&gt;org.jboss.weld.vertx:weld-vertx-core&lt;/code&gt;, Vert.x and Weld dependencies.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_2_start_cdi_container&quot;&gt;2. Start CDI Container&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deploy &lt;code&gt;WeldWebVerticle&lt;/code&gt; and configure router:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;class MyVertxApp {

     public static void main(String[] args) {
         final Vertx vertx = Vertx.vertx();
         // ...deploy other existing verticles
         final WeldWebVerticle weldVerticle = new WeldWebVerticle();
         vertx.deployVerticle(weldVerticle, result -&amp;gt; {
             if (result.succeeded()) {
                 vertx.createHttpServer().requestHandler(weldVerticle.createRouter()::accept).listen(8080);
             }
         });
     }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_3_observe_events&quot;&gt;3. Observe Events&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a CDI observer method to consume messages from the Vert.x event bus.
&lt;code&gt;@VertxConsumer&lt;/code&gt; qualifier is used to specify the address the consumer will be registered to.
&lt;code&gt;VertxEvent&lt;/code&gt; is a wrapper of a Vert.x message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
class HelloBean {

  void consumerWithDependencies(@Observes @VertxConsumer(&quot;hello.address&quot;) VertxEvent event, HelloService service) {
    // Reply to the message - io.vertx.core.eventbus.Message.reply(Object)
    event.setReply(service.hello());
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Since we’re working with regular observer methods, additional parameters may be declared (next to the event parameter) - these parameters are injection points.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_4_declare_routes&quot;&gt;4. Declare Routes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Annotate a class implementing &lt;code&gt;Handler&amp;lt;RoutingContext&amp;gt;&lt;/code&gt; with &lt;code&gt;@org.jboss.weld.vertx.web.WebRoute&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@WebRoute(&quot;/hello&quot;) // Matches all HTTP methods
class HelloHandler implements Handler&amp;lt;RoutingContext&amp;gt; {

    @Inject
    HelloService service;

    @Override
    public void handle(RoutingContext ctx) {
        ctx.response().setStatusCode(200).end(service.hello());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will be translated into something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;void integrationPseudoCode() {
  HelloHandler hello = produceInjectedInstanceOfHelloHandler();
  Router router = obtainRouterInstance();
  router.route(&quot;/hello&quot;).handler(hello);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;@WebRoute&lt;/code&gt; is repeatable, i.e. if multiple annotations are declared on a handler class a single handler instance is used for multiple routes.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_5_enjoy_and_celebrate&quot;&gt;5. Enjoy and Celebrate&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that’s it.
Fairly straightforward, isn’t it?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_future_and_plans&quot;&gt;Future and Plans&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far there are no new features on the roadmap.
The plan is to provide bugfix releases as needed.
But &lt;code&gt;weld-vertx&lt;/code&gt; is an open source project and so the future is in hands of the community.
Feel free to &lt;a href=&quot;https://github.com/weld/weld-vertx/issues&quot;&gt;create issues, share ideas, throw feature requests&lt;/a&gt; and send pull requests!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/06/14/weld-244Final/</id>
<title>Weld 2.4.4.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-06-14T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/06/14/weld-244Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
We have been busy chasing down some annoying little bugs and it&#8217;s high time you got the fruits of those efforts into your hands.
Say hello to Weld 2.4.4.Final.


Notable fixes and improvements:




Weld Core



Fixed bean discovery event ordering when processing producers (WELD-2393)


Eliminated an NPE for a corner case with abstract decorator (WELD-2273)


Corrected @Initialized(RequestScoped.class) event firing in @PostConstruct callbacks (WELD-2372)


Fixed BeanManager.isStereotype() behavior when checking a qualifier annotated with yet another qualifier (WELD-2390)





Weld SE



Added a convenience static method WeldContainer.current(), a shortcut for CDI.current() with no need to cast the result (WELD-2399)


Allowed to specify bean discovery mode for synthetic archives (WELD-2386)


Fixed bean class discovery problem...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have been busy chasing down some annoying little bugs and it’s high time you got the fruits of those efforts into your hands.
Say hello to Weld 2.4.4.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld Core&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed bean discovery event ordering when processing producers (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2393&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2393&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eliminated an NPE for a corner case with abstract decorator (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2273&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2273&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corrected &lt;code&gt;@Initialized(RequestScoped.class)&lt;/code&gt; event firing in &lt;code&gt;@PostConstruct&lt;/code&gt; callbacks (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2372&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2372&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed &lt;code&gt;BeanManager.isStereotype()&lt;/code&gt; behavior when checking a qualifier annotated with yet another qualifier (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2390&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2390&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added a convenience static method &lt;code&gt;WeldContainer.current()&lt;/code&gt;, a shortcut for &lt;code&gt;CDI.current()&lt;/code&gt; with no need to cast the result (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2399&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2399&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allowed to specify bean discovery mode for synthetic archives (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2386&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2386&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed bean class discovery problem when adding whole packages (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2395&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2395&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved logging and make checks more lenient in case the container is not yet bootstrapped (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2382&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2382&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration options&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In SE and Servlet environments, Jandex can now be forcibly prohibited from processing your archives. This is useful when a third-party dependecy brings in some unsupported Jandex version (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2374&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2374&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Development tools&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a deployment validation fails and the development mode is enabled, a simple &lt;strong&gt;validation HTML report&lt;/strong&gt; (which contains a lot of useful information) is generated&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Users are encouraged to always attach this report when asking a question on the mailing list or any other communication channel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.4.Final/wildfly-10.1.0.Final-weld-2.4.4.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available.
Target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.4.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?version=12334296&amp;amp;styleName=Html&amp;amp;projectId=12310891&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/05/19/tour-around-weld-3/</id>
<title>Tour around Weld 3</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-05-19T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/05/19/tour-around-weld-3/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<summary>
Contents

Async Events and Notification Options
Configurators API
SE Bootstrap API
On-demand Request Context Activation
Observer Method Ordering
Intercepting Produced Beans
Trimmed Bean Archives



This post briefly describes all the main CDI 2.0 features and elaborates on Weld-specific features we added on top of that.
It is not intended as a deep-dive but rather to give you the overall idea of what is going on and what can the new release offer.
So, enough talk, let&#8217;s get the show on the road!


Async Events and Notification Options


Up until now, the only way to send events was to do so synchronously.
That meant stopping the work of your current thread to instead occupy...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_async_events_and_notification_options&quot;&gt;Async Events and Notification Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_configurators_api&quot;&gt;Configurators API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_se_bootstrap_api&quot;&gt;SE Bootstrap API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_on_demand_request_context_activation&quot;&gt;On-demand Request Context Activation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_observer_method_ordering&quot;&gt;Observer Method Ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_intercepting_produced_beans&quot;&gt;Intercepting Produced Beans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_trimmed_bean_archives&quot;&gt;Trimmed Bean Archives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post briefly describes all the main CDI 2.0 features and elaborates on Weld-specific features we added on top of that.
It is not intended as a deep-dive but rather to give you the overall idea of what is going on and what can the new release offer.
So, enough talk, let’s get the show on the road!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_async_events_and_notification_options&quot;&gt;Async Events and Notification Options&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up until now, the only way to send events was to do so synchronously.
That meant stopping the work of your current thread to instead occupy it with observer resolution and subsequent notification of observer methods.
Once all that was done, the thread resumed it’s work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With CDI 2.0 there are asynchronous events - a &#39;fire &amp;amp; forget&#39; way of handling things.
Here is how to fire such and event and how to observe it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;// nothing new here, plain old Event is used
@Inject Event&amp;lt;Payload&amp;gt; event;

public void sendAsyncEvent() {
    // we use a new fireAsync method for asynchronous events
    CompletionStage&amp;lt;Payload&amp;gt; eventResult = event.fireAsync(new Payload()).thenAccept(...);
}

public void asyncObserver (@ObservesAsync Payload payload){ … }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Few things to note here - first of all, the return value of &lt;code&gt;fireAsync&lt;/code&gt; is &lt;code&gt;CompletionStage&lt;/code&gt; allowing you to chain the work for when the event is done.
You can follow-up with more tasks, react on exceptional return value and so on.
Another noticeable detail is that observers which are to be notified have to have &lt;code&gt;@ObservesAsync&lt;/code&gt; annotation.
As you might have guessed, an observer can be notified of either synchronous (&lt;code&gt;@Observes&lt;/code&gt;) or asynchronous (&lt;code&gt;@ObservesAsync&lt;/code&gt;) events but never both!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from this very basic usage, async events allow you to specify &lt;code&gt;NotificationOptions&lt;/code&gt; - an option allowing you to tweak the way notification works.
From CDI perspective, there is currently only one standardized option and that enables usage of custom executors which will be used for notifications.
But the API was designed in a generic way so that implementation can enrich it with its own options.
Weld currently offers two more options - timeout and parallel execution - both of which are well described in &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Final/en-US/html/events.html#_notification_options&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Weld docs&lt;/a&gt;.
And here is a snippet showing it in action:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public void sendAsyncEventWithOptions() {
    // we use a secondary version of fireAsync method with NotificationOptions parameter
    event.fireAsync(new Payload(), NotificationOptions.of(&quot;weld.async.notification.timeout&quot;, 2000));
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configurators_api&quot;&gt;Configurators API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another of the key features are &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#configurators&quot; target=&quot;blank&quot;&gt;&lt;code&gt;Configurators&lt;/code&gt;&lt;/a&gt;.
They are here to ease our work when doing small tweaks in extensions.
Here is a snippet showing how easy it can be to register a new bean in &lt;code&gt;AfterBeanDiscovery&lt;/code&gt; using configurator.
You don’t have to create a new class implementing &lt;code&gt;Bean&amp;lt;X&amp;gt;&lt;/code&gt; anymore:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public void addABean(@Observes AfterBeanDiscovery event) {
    // get an instance of BeanConfigurator
    event.addBean()
      // set the desired data
      .types(Foo.class)
      .scope(RequestScoped.class)
      .addQualifier(Custom.CustomLiteral.INSTANCE);
      //finally, add a callback to tell CDI how to instantiate this bean
      .produceWith(obj -&amp;gt; new Foo());
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following configurators were added:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AnnotatedTypeConfigurator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;InjectionPointConfigurator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BeanAttributesConfigurator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BeanConfigurator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ObserverMethodConfigurator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProducerConfigurator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On top of that, Weld adds one additional configurator - &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html_single/#_weld_enriched_container_lifecycle_events&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;InterceptorConfigurator&lt;/code&gt;&lt;/a&gt;.
This one allows you to observe &lt;code&gt;WeldAfterBeanDiscovery&lt;/code&gt; and then use this configurator to create and register a custom interceptor from scratch.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_se_bootstrap_api&quot;&gt;SE Bootstrap API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big change in CDI 2.0 is the SE support.
Of course, Weld fans have had this for years now, but it has gone official, so that still counts, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The official CDI API is very similar to that of Weld, here is how it looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public void bootBasicContainer() {
    SeContainerInitializer initializer = SeContainerInitializer.newInstance();
    try (SeContainer container = initializer.initialize()) {
        Assert.assertTrue(container.isRunning());
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the very basic way; you can also opt to use synthetic bean archive where you cherry-pick all the beans/interceptors/…​ in your archive.
&lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#se_bootstrap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI spec&lt;/a&gt; describes this fairly well, so how about we instead shift our attention to what Weld SE offers on top of that?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A small reminder of how to boot SE container using pure Weld API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public void bootWeldSeContainer() {
    Weld weld = new Weld();
    try (WeldContainer container = weld.initialize()) {
        container.select(FooBean.class).get();
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the things Weld makes easier, is when you want to create a quick extension, but don’t really want to write a whole new class which you then need to place in &lt;code&gt;META-INF/services&lt;/code&gt; or register on bootstrap.
You can easily create a &#39;synthetic extension&#39; programatically:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Extension testExtension = ContainerLifecycleObserver.extensionBuilder()
    .add(afterBeanDiscovery((e) -&amp;gt; System.out.println(&quot;Bean discovery completed!&quot;)))
    .add(processAnnotatedType().notify((e) -&amp;gt; {
            if (e.getAnnotatedType().getJavaClass().getName().startsWith(&quot;com.foo&quot;)) {
                e.veto();
            }
        })).build();

try (WeldContainer container = new Weld().addExtension(testExtension).initialize()) {
    // Use the container...
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What we just did was to create an extension with two container lifecycle observer methods.
It follows a familiar builder pattern and the body of the observer methods is specified as lambda expression.
Before booting SE container, we register this extension as we would any other.
For more information about this, don’t hesitate to check our older &lt;a href=&quot;http://weld.cdi-spec.org/news/2016/02/08/weld-se-synth-lifecycle-events/&quot;&gt;news post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_on_demand_request_context_activation&quot;&gt;On-demand Request Context Activation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Especially in SE (although not only there) you might want to activate a &lt;code&gt;RequestContext&lt;/code&gt; manually for certain period of time.
There are two ways to achieve that, first of which is an interceptor - &lt;code&gt;@ActivateRequestContext&lt;/code&gt;.
You can use that on either a method or a type (enabling it for all methods).
As you might expect, it will activate the context before executing your method and shut it down afterwards.
The other way is through means of built-in bean named &lt;code&gt;RequestContextController&lt;/code&gt;.
This bean can be injected as any other CDI bean and offers to self-explanatory methods: &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt;.
The obvious advantage of this approach is that you can enable the context for an extended period of time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_observer_method_ordering&quot;&gt;Observer Method Ordering&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A small but noteworthy improvement to observer methods.
You can not leverage &lt;code&gt;@Priority&lt;/code&gt; annotation in observer methods hence ordering them as you wish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public void observeFirst (@Observes @Priority(1) EventPayload payload) {...}

public void observeSecond (@Observes @Priority(2) EventPayload payload) {...}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_intercepting_produced_beans&quot;&gt;Intercepting Produced Beans&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up until now, anything you created using producers could not be easily intercepted.
CDI 2.0 allows this for &lt;code&gt;@AroundInvoke&lt;/code&gt; interceptors in two ways.
There is a new method on &lt;code&gt;BeanManager&lt;/code&gt; named &lt;code&gt;createInterceptionFactory&lt;/code&gt; but most of the time you will rather use a built-in bean &lt;code&gt;InterceptionFactory&lt;/code&gt; which can be injected as a producer method parameter.
Here is a snippet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Produces
@Dependent
public ProducedBean produceFoo(InterceptionFactory&amp;lt;ProducedBean&amp;gt; factory) {
    factory.configure().add(Counter.Literal.INSTANCE);
    return factory.createInterceptedInstance(new ProducedBean());
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To explain this a bit, we first inject the built-in bean with the type equal to the produced type we wish to intercept.
Then we &lt;code&gt;configure()&lt;/code&gt; it, which returns an &lt;code&gt;AnnotatedTypeConfigurator&lt;/code&gt; allowing us to add interceptor binding.
Finally, we invoke &lt;code&gt;InterceptionFactory.createInterceptedInstance()&lt;/code&gt; which takes a the object we produce as a parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can read more about this in &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#interception_factory&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this CDI spec chapter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_trimmed_bean_archives&quot;&gt;Trimmed Bean Archives&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least feature we will mention are so called &#39;trimmed&#39; bean archives.
You can mark an explicit bean archive as trimmed in &lt;code&gt;beans.xml&lt;/code&gt; by adding the &lt;code&gt;&amp;lt;/trim&amp;gt;&lt;/code&gt; element.
Such bean archive will perform an annotated type discovery as with &lt;code&gt;bean-discovery-mode=&quot;all&quot;&lt;/code&gt; but all types that don’t have a bean defining annotation or any scope annotation are then removed from the set of discovered types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even in this case, Weld allows you to go one step further and &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#veto-types-without-bean-defining-annotation&quot;&gt;veto types based on regular expression&lt;/a&gt;.
It works on a similar principle but affects your whole application - it processess all types from all bean archives.
Your archives will be scanned as they would be with bean discovery mode &lt;code&gt;all&lt;/code&gt; and &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; will be fired for all found annotated types.
Then, based on the regular expression you provide, annotated types which do not have a bean defining annotation and match the regular expression will be vetoed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/05/15/weld-300Final/</id>
<title>Weld 3.0.0.Final - the first implementation of CDI 2.0!</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-05-15T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/05/15/weld-300Final/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
I am very pleased to announce the release of Weld 3.0.0.Final - the first implementation of CDI 2.0!
I would like to thank not only to everyone involved in this particular release but also to the Weld community as a whole and also to all active CDI EG members who invested a lot of energy into the specification process!


[ source, java ]



/**
 * TODO: Continue to deliver bugfixes and improvements
 */
public class WeldTeam extends OpenSourceCommunity {

  @Inject
  @AwesomeNews
  Event&lt;String&gt; event;

  public void release() {
    // Fire asynchronously so that we don't need to wait...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very pleased to announce the release of Weld &lt;strong&gt;3.0.0.Final&lt;/strong&gt; - the first implementation of &lt;strong&gt;CDI 2.0&lt;/strong&gt;!
I would like to thank not only to everyone involved in this particular release but also to the Weld community as a whole and also to all active CDI EG members who invested a lot of energy into the specification process!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;/**
 * TODO: Continue to deliver bugfixes and improvements
 */
public class WeldTeam extends OpenSourceCommunity {

  @Inject
  @AwesomeNews
  Event&amp;lt;String&amp;gt; event;

  public void release() {
    // Fire asynchronously so that we don&#39;t need to wait for observer notification before we start celebrating!
    event.fireAsync(&quot;CDI 1.2 is dead, long live CDI 2.0!&quot;);
    celebrate();
  }

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Weld 3 is an IMPORTANT MILESTONE.
Therefore, we’re preparing a special blogpost summarizing all the important stuff that was added.
Expect the &lt;strong&gt;Tour around Weld 3&lt;/strong&gt; blogpost within a few days.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s sum up the notable changes since &lt;strong&gt;3.0.0.CR2&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld defines two non-portable &lt;strong&gt;notification options&lt;/strong&gt; to configure the notification of asynchronous observer methods (see also &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Final/en-US/html/events.html#_notification_options&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Notification options&lt;/a&gt; for more info):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weld.async.notification.mode&lt;/code&gt; - the notification mode, possible values are: &lt;code&gt;SERIAL&lt;/code&gt; (default) and &lt;code&gt;PARALLEL&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weld.async.notification.timeout&lt;/code&gt; - the notification timeout (in milliseconds) after which the returned completion stage must be completed.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the time expires the stage is completed exceptionally with a &lt;code&gt;CompletionException&lt;/code&gt; holding the &lt;code&gt;java.util.concurrent.TimeoutException&lt;/code&gt; as its cause&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The expiration does not abort the notification of the observers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session replication - handle situation when &lt;code&gt;HTTPSessionBean&lt;/code&gt; might not be serializable (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2346&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2346&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fire &lt;code&gt;@Initialied(RequestScoped.class)&lt;/code&gt;/&lt;code&gt;@Destroyed(RequestScoped.class)&lt;/code&gt; events for a &lt;code&gt;@PostConstruct&lt;/code&gt; callback if the request context was activated for the specific callback&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It’s possible to easily register a &lt;code&gt;org.jboss.weld.bootstrap.api.Service&lt;/code&gt; during container bootstrap (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2360&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2360&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any &lt;code&gt;javax.enterprise.inject.spi.CDI&lt;/code&gt; method can now be called during &lt;code&gt;AfterDeploymentValidation&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2371&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2371&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ContainerInitialized&lt;/code&gt; and &lt;code&gt;ContainerShutdown&lt;/code&gt; now implement &lt;code&gt;toString()&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2354&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2354&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed usage of Jandex on Tomcat when using &lt;code&gt;unpackWars=false&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2357&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2357&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added option to disable Jandex in Weld SE and Weld Servlet (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2374&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2374&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Development tools&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a deployment validation fails and the development mode is enabled a simple &lt;strong&gt;validation HTML report&lt;/strong&gt; (which contains a lot of useful information) is generated&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Users are encouraged to always attach this report when asking a question on the mailing list or any other communication channel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated documentation and migration notes for integrators&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Examples cleanup (dropped GAE support, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://wildfly.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available.
This time the target platforms are &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Final/wildfly-10.1.0.Final-weld-3.0.0.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WildFly 10.1.0.Final&lt;/a&gt; and &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Final/wildfly-11.0.0.Alpha1-weld-3.0.0.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WildFly 11.0.0.Alpha1&lt;/a&gt;.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333608&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/04/07/weld-243Final/</id>
<title>Weld 2.4.3.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-04-07T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/04/07/weld-243Final/" rel="alternate" type="text/html" />
<author>
<name>Matej Novotny</name>
</author>
<category term="release"></category>
<summary>
Even as we get ever closer to CDI 2.0 final version, we shan&#8217;t forget about our stable 2.4 branch.
Ladies and gentlemen, here comes the next-in-line 2.4 release - Weld 2.4.3.Final!


Notable fixes and improvements:




Weld now shares proxy classes for built-in beans of the same type (WELD-2344)


Fixed usage of Jandex on Tomcat when using unpackWars=false (WELD-2357)


Weld now supports wider variety of non-portable extension observer methods (WELD-2338)


There is now new debug level logging during bootstrap which allows to monitor name, start, end and duration of all bootstrap phases (WELD-2336)


Session replication



Built-in session and conversation scoped beans are not part of the bean identifier index...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even as we get ever closer to CDI 2.0 final version, we shan’t forget about our stable 2.4 branch.
Ladies and gentlemen, here comes the next-in-line 2.4 release - Weld 2.4.3.Final!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld now shares proxy classes for built-in beans of the same type (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2344&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2344&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed usage of Jandex on Tomcat when using &lt;code&gt;unpackWars=false&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2357&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2357&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld now supports wider variety of non-portable extension observer methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2338&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2338&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is now new debug level logging during bootstrap which allows to monitor name, start, end and duration of all bootstrap phases (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2336&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2336&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session replication&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Built-in session and conversation scoped beans are not part of the bean identifier index anymore (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2343&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2343&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handle situation when &lt;code&gt;HTTPSessionBean&lt;/code&gt; might not be serializable (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2346&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2346&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can now easily register new &lt;code&gt;org.jboss.weld.bootstrap.api.Service&lt;/code&gt; during container bootstrap (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2360&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2360&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any &lt;code&gt;javax.enterprise.inject.spi.CDI&lt;/code&gt; method can now be called during &lt;code&gt;AfterDeploymentValidation&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2371&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2371&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ContainerInitialized&lt;/code&gt; event is now correctly fired after registration of shutdown hook (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2340&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2340&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ContainerInitialized&lt;/code&gt; and &lt;code&gt;ContainerShutdown&lt;/code&gt; now implement &lt;code&gt;toString()&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2354&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2354&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe development tool&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow monitoring of bean instance creation using &lt;code&gt;AroundConstruct&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2332&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2332&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed a situation when bean was wrongly marked as unused when injected as parameter (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2342&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2342&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333607&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.3.Final/wildfly-10.1.0.Final-weld-2.4.3.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available.
This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.3.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333607&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/03/03/weld-300CR2/</id>
<title>Weld 3.0.0.CR2</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-03-03T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/03/03/weld-300CR2/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
I am very pleased to announce the release of Weld 3.0.0.CR2 (CDI 2.0-PFD).
The intention is to provide the latest updates so that early adopters and reviewers can work with up-to-date reference implementation during the JCP review process.


Notable fixes and improvements:




InterceptionFactory handles interface correctly (WELD-2335)


Enable to obtain InjectionPoint metadata from within BeanConfigurator#produceWith() (WELD-2333)


ObserverMethodConfigurator.beanClass() should be preset to the extension class (WELD-2324)


Performance improvements in javax.enterprise.inject.Instance implementation (WELD-2322 and WELD-2323)


Don&#8217;t include built-in session and conversation scoped beans in the bean identifier index (WELD-2343)


Support InjectionPoint metadata injected into dependent singleton session bean (WELD-2341)


Logging



Log DEBUG info about important phases during bootstrap (WELD-2336)


Fix the error message...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very pleased to announce the release of Weld &lt;strong&gt;3.0.0.CR2&lt;/strong&gt; (&lt;strong&gt;CDI 2.0-PFD&lt;/strong&gt;).
The intention is to provide the latest updates so that early adopters and reviewers can work with up-to-date reference implementation during the JCP review process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;InterceptionFactory&lt;/code&gt; handles interface correctly (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2335&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable to obtain &lt;code&gt;InjectionPoint&lt;/code&gt; metadata from within &lt;code&gt;BeanConfigurator#produceWith()&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2333&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2333&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ObserverMethodConfigurator.beanClass()&lt;/code&gt; should be preset to the extension class (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2324&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2324&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance improvements in &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt; implementation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2322&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2322&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2323&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2323&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don’t include built-in session and conversation scoped beans in the bean identifier index (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2343&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2343&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support &lt;code&gt;InjectionPoint&lt;/code&gt; metadata injected into dependent singleton session bean (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2341&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2341&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Log DEBUG info about important phases during bootstrap (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2336&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2336&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix the error message when an extension observer method is static (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2331&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2331&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved transactional observer methods logging in case of failure (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2330&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2330&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE - &lt;code&gt;ContainerInitialized&lt;/code&gt; should be fired after the container is initialized and shutdown hook is registered (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2340&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2340&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe development tool&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extended bean archive info&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitor bean instance creation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not mark a bean as unused if only injected into an observer method or disposer method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.probe&lt;/code&gt; package is vetoed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333159&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.CR2/wildfly-10.1.0.Final-weld-3.0.0.CR2-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available.
This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.CR2/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333159&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/02/02/weld-242Final/</id>
<title>Weld 2.4.2.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-02-02T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/02/02/weld-242Final/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
As you may know, CDI 2 (JSR 365) is in Public Review phase.
That&#8217;s great news for early adopters.
But for now, I am very pleased to announce another production-ready version of Weld 2.4 (CDI 1.2).
See also the release details.
Thanks to everyone involved in this release!





Warning


There is a regression in Weld 2.4.2.Final. The problem only occurs if a Security Manager is used. However, users are encouraged to upgrade to 2.4.2.SP1 which contains a fix for the issue.





Notable fixes and improvements:




Added trimmed bean archives support (CDI 2.0, WELD-2314)


Fixed Weld SE and Weld Servlet cooperation (WELD-2260 and WELD-2262)


Fixed ActivateRequestContextInterceptor - align the priority with...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you may know, CDI 2 (JSR 365) is in Public Review phase.
That’s great news for early adopters.
But for now, I am very pleased to announce another production-ready version of &lt;strong&gt;Weld 2.4&lt;/strong&gt; (CDI 1.2).
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12332808&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There is a &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2328&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;regression&lt;/a&gt; in Weld &lt;strong&gt;2.4.2.Final&lt;/strong&gt;. The problem only occurs if a &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/environment/security.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Security Manager&lt;/a&gt; is used. However, users are encouraged to upgrade to &lt;strong&gt;2.4.2.SP1&lt;/strong&gt; which contains a fix for the issue.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added &lt;strong&gt;trimmed bean archives&lt;/strong&gt; support (CDI 2.0, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2314&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2314&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed Weld SE and Weld Servlet cooperation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2260&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2260&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2262&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2262&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed &lt;code&gt;ActivateRequestContextInterceptor&lt;/code&gt; - align the priority with CDI 2.0, fire &lt;code&gt;@Initialized&lt;/code&gt; and &lt;code&gt;@Destroyed&lt;/code&gt; events (CDI 2.0, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2281&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2281&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed JDK9 build problems (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2303&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2303&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2301&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Validation - allow to use CDI 2 rules when validating selected alternatives in &lt;code&gt;bean.xml&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2313&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2313&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance improvements in &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt; implementation (CDI 2.0, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2323&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2323&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Illegal bean types ignored for a session bean (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2315&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2315&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependency upgrade - &lt;code&gt;jboss-classfilewriter&lt;/code&gt; to 1.2.1.Final (enables interception of default methods, see also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2093&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2093&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE - addded useful methods from &lt;code&gt;SeContainerInitializer&lt;/code&gt; (CDI 2.0, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2316&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2316&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe development tool - extended bean archive info&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.2.Final/wildfly-10.1.0.Final-weld-2.4.2.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available.
This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12332808&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/02/01/tip4-testing/</id>
<title>Weld Tip 4 - Testing CDI/Weld apps</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-02-01T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/02/01/tip4-testing/" rel="alternate" type="text/html" />
<author>
<name>Tomas Remes, Matej Novotny</name>
</author>
<category term="tips"></category>
<summary>
Contents

Using Weld in JUnit tests
Arquillian as the chosen framework for testing
Java EE application server
Servlet environment
Java SE environment
Arquillian Weld Embedded container



In this follow-up article of our Weld Tips series we are going to focus on testing of CDI/Weld applications.
Let&#8217;s discover options for unit testing in the first part and then continue with integration testing.
To set things straight - by integration testing we mean testing in some kind of container and hence in certain environment (SE, servlet, full EE server).
However, no matter the environment we always make use of Arquillian integration testing framework.


Using Weld in JUnit tests


Recently we created Weld JUnit extension...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_using_weld_in_junit_tests&quot;&gt;Using Weld in JUnit tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_arquillian_as_the_chosen_framework_for_testing&quot;&gt;Arquillian as the chosen framework for testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_java_ee_application_server&quot;&gt;Java EE application server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_servlet_environment&quot;&gt;Servlet environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_java_se_environment&quot;&gt;Java SE environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_arquillian_weld_embedded_container&quot;&gt;Arquillian Weld Embedded container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this follow-up article of our Weld Tips series we are going to focus on testing of CDI/Weld applications.
Let’s discover options for unit testing in the first part and then continue with integration testing.
To set things straight - by integration testing we mean testing in some kind of container and hence in certain environment (SE, servlet, full EE server).
However, no matter the environment we always make use of &lt;a href=&quot;http://arquillian.org/&quot;&gt;Arquillian&lt;/a&gt; integration testing framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_using_weld_in_junit_tests&quot;&gt;Using Weld in JUnit tests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently we created Weld JUnit extension which uses JUnit4 &lt;code&gt;@Rule&lt;/code&gt; to initialize a Weld SE container before each test method execution. For further information please check following &lt;a href=&quot;https://developer.jboss.org/people/mkouba/blog/2017/01/24/easy-testing-of-cdi-components-with-weld-and-junit4/&quot;&gt;blogpost&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_arquillian_as_the_chosen_framework_for_testing&quot;&gt;Arquillian as the chosen framework for testing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Arquillian may look complex at first, it is certainly worth it. Here are some of the advantages it gives you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allows usage of CDI &lt;code&gt;@javax.inject.Inject&lt;/code&gt; directly in test classes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Works well with ShrinkWrap making archive creation and deployment a breeze&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://arquillian.org/guides/shrinkwrap_introduction/&quot;&gt;ShrinkWrap&lt;/a&gt; can create any type of deployment archive (WAR, JAR, even infamous EAR) with exactly the capabilities you wish it to have&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use dedicated &lt;code&gt;beans.xml&lt;/code&gt; or &lt;code&gt;@Alternatives&lt;/code&gt; for given test case&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Portability - allows to write one test and run it on any container&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Arquillian only needs correct adapter; therefore, combined with Maven profiles this gives you some nice fire power for matrix testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allows for very complex testing scenarios&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For instance you can create several deployments which you then manually (if you so wish) deploy/undeploy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This makes it viable even for cluster testing (session replication, failover scenarios, …​)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can start the application server itself or can just connect to running one&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact writing tests with Arquillian is quite straightforward. It’s basically about right usage of right annotations. Basic test could like this:
[ source, java ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt; package org.arquillian.example;

 import javax.inject.Inject;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

 @RunWith(Arquillian.class)
 public class GreeterTest {

     // This static method builds the virtual test deployment archive
     @Deployment
     public static JavaArchive createDeployment() {
         return ShrinkWrap.create(JavaArchive.class)
             .addClass(Greeter.class)
             .addAsManifestResource(EmptyAsset.INSTANCE, &quot;beans.xml&quot;);
     }

     @Inject
     Greeter greeter;

     @Test
     public void should_create_greeting() {
        Assert.assertEquals(&quot;Hello, Earthling!&quot;, greeter.createGreeting(&quot;Earthling&quot;));
     }
 }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a complete Arquillian rookie, you might want to look at their &lt;a href=&quot;http://arquillian.org/guides/getting_started_rinse_and_repeat/&quot;&gt;Getting started guide&lt;/a&gt;.
Should you just need an inspiration, you needn’t look any further than our &lt;a href=&quot;https://github.com/weld/core/tree/master/tests-arquillian/src/test/java/org/jboss/weld/tests&quot;&gt;testsuite&lt;/a&gt;.
To support the though of Arquillian usefulness for CDI/Weld testing, we may also point out that even &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/tree/master/impl/src/main/java/org/jboss/cdi/tck/tests&quot;&gt;CDI TCK tests&lt;/a&gt; use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let’s take a look at different environments and then round it up with &lt;a href=&quot;https://github.com/arquillian/arquillian-container-weld&quot;&gt;Arquillian Weld Embedded container&lt;/a&gt;, which can be used in each and every environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_java_ee_application_server&quot;&gt;Java EE application server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you want to test your application in Java EE application server you basically need to create your test deployment archive, deploy it, execute the test and undeploy the archive.
As stated above, &lt;a href=&quot;http://arquillian.org/modules/shrinkwrap-shrinkwrap/&quot;&gt;ShrinkWrap&lt;/a&gt; covers the archive creation (typically WAR or EAR).
When it comes to deployment/undeployment, Arquillian controls that, unless you take the reins and control it yourself - just keep an eye for dangling deployments.
You also get to chose between using so called managed container, where Arquillian starts and stops the desired container for you, and remote container where Arquillian tries to connect to already running container.
Since we are talking Java EE application server, you can use CDI out of the box.
Just pay attention to &lt;a href=&quot;https://docs.jboss.org/author/display/ARQ/Test+run+modes&quot;&gt;test mode&lt;/a&gt; you are using.
You can check available Arquillian container adapters &lt;a href=&quot;http://arquillian.org/modules/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example to use Arquillian WildFly Managed container you need to define following dependency:
[ source, xml ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;               &amp;lt;dependency&amp;gt;
                   &amp;lt;groupId&amp;gt;org.wildfly.arquillian&amp;lt;/groupId&amp;gt;
                   &amp;lt;artifactId&amp;gt;wildfly-arquillian-container-managed&amp;lt;/artifactId&amp;gt;
                   &amp;lt;version&amp;gt;1.1.0.Final&amp;lt;/version&amp;gt;
                   &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
               &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_servlet_environment&quot;&gt;Servlet environment&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In basic Servlet environment you need to deploy all the dependencies of Weld Servlet integration (as CDI API, Interceptors API, etc.) to your Servlet container and thus embedded container option could be sufficient.
As you can &lt;a href=&quot;http://arquillian.org/modules/&quot;&gt;see&lt;/a&gt; Arquillian offers embedded container adapters for all well known Servlet containers such as Tomcat, Jetty and Undertow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example to use Arquillian Embedded Tomcat container you need to define following dependency:
[ source, xml ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;               &amp;lt;dependency&amp;gt;
                    &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;arquillian-tomcat-embedded-8&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;1.0.0.CR8&amp;lt;/version&amp;gt;
                    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_java_se_environment&quot;&gt;Java SE environment&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java SE is not effectively a container, however it could be very handy to have an option to easily configure classpath elements of your test.
This is exactly what &lt;a href=&quot;https://github.com/arquillian/arquillian-container-se&quot;&gt;Arquillian container SE&lt;/a&gt; offers.
With this extension you can build your test classpath and the test executes remotely over JMX in new isolated JVM process.
You can find basic information in &lt;a href=&quot;https://github.com/arquillian/arquillian-container-se/blob/master/README.adoc&quot;&gt;README&lt;/a&gt; or you can take look into already mentioned &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/tree/master/impl/src/main/java/org/jboss/cdi/tck/tests&quot;&gt;CDI TCK tests&lt;/a&gt; where you can find &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/blob/master/impl/src/main/java/org/jboss/cdi/tck/TestGroups.java#L100&quot;&gt;SE testgroup&lt;/a&gt; which involves all SE related tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The maven dependency for this extension looks like this:
[ source, xml ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;               &amp;lt;dependency&amp;gt;
                   &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
                   &amp;lt;artifactId&amp;gt;container-se-managed&amp;lt;/artifactId&amp;gt;
                   &amp;lt;version&amp;gt;1.0.1.Final&amp;lt;/version&amp;gt;
               &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_arquillian_weld_embedded_container&quot;&gt;Arquillian Weld Embedded container&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all - this test container is suitable in situations when you know you don’t need to work with full Java EE application server and you are OK with dummy mock EJB, JTA, JPA etc. services.
As stated in the beginning of this article, you can use it for any environment but you have to keep it mind, that other technologies/services will be mocked only.
By default, this container operates in SE mode, as you don’t need to mock anything there, but you can use a system property (&lt;code&gt;Denvironment=EE&lt;/code&gt;) or a programmatic approach in order to make it work in other environments.
For full list of supported environments, see &lt;a href=&quot;https://github.com/weld/api/blob/master/weld-spi/src/main/java/org/jboss/weld/bootstrap/api/Environments.java&quot;&gt;&lt;code&gt;Environments.java&lt;/code&gt;&lt;/a&gt;.
We recommend you to take a glance at &lt;a href=&quot;https://github.com/arquillian/arquillian-container-weld/blob/master/README.adoc&quot;&gt;README&lt;/a&gt; file - especially those few lines about flat deployment structure (this means this container is not very suitable for testing EAR deployments) and configuration property for setting testing environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The maven dependency for this container could look like this:
[ source, xml ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;               &amp;lt;dependency&amp;gt;
                    &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;arquillian-weld-embedded&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;2.0.0.Beta4&amp;lt;/version&amp;gt;
                    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2017/01/23/weld-300CR1/</id>
<title>Weld 3.0.0.CR1</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2017-01-23T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2017/01/23/weld-300CR1/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
I am very pleased to announce the release of Weld 3.0.0.CR1 (aligned with CDI 2.0-PFD).
See also the release details.
Thanks to everyone involved in this release!
This version of Weld will be part of the JSR 365 Approval Ballot (watch CDI spec website for news).
The Beta1 version of Weld 3 turned out to be sufficiently stable and so the first release candidate is mostly dedicated to cleanup and minor optimizations.
We would like to release Weld 3.0.0.Final (stable version of CDI 2.0) in early February.


WildFly Patch


As usual, a patch for WildFly is available.
This time the target platform is WildFly 10.1.0.Final.
If you’re not familiar...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very pleased to announce the release of Weld &lt;strong&gt;3.0.0.CR1&lt;/strong&gt; (aligned with &lt;strong&gt;CDI 2.0-PFD&lt;/strong&gt;).
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331714&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!
This version of Weld will be part of the JSR 365 Approval Ballot (watch &lt;a href=&quot;http://cdi-spec.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI spec website&lt;/a&gt; for news).
The Beta1 version of Weld 3 turned out to be sufficiently stable and so the first release candidate is mostly dedicated to cleanup and minor optimizations.
We would like to release Weld &lt;strong&gt;3.0.0.Final&lt;/strong&gt; (stable version of CDI 2.0) in early February.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.CR1/wildfly-10.1.0.Final-weld-3.0.0.CR1-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available.
This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
If you’re not familiar with patching WildFly, check the &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.CR1/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331714&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/12/19/weld-300Beta1/</id>
<title>Weld 3.0.0.Beta1</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-12-19T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/12/19/weld-300Beta1/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
I am very pleased to announce the first Beta version of Weld 3.0.0 (CDI 2.0).
See also the release details.
Thanks to everyone involved in this release!


This is an important milestone.
CDI 2.0 is now considered "feature complete" and so the next Weld 3 versions should be mostly dedicated to cleanup and optimization.
The next version will be Weld 3.0.0.CR1 (ETA in mid January).
Finally, we would like to release Weld 3.0.0.Final in early February.


New and noteworthy




javax.enterprise.inject.spi.InterceptionFactory implementation (WELD-2257)


ProcessSyntheticObserverMethod container lifecycle event (WELD-2279)


BeforeDestroyed event fired before a context is actually destroyed (WELD-2269)


"trimmed" bean archives (WELD-2268)


context control - ActivateRequestContext interceptor binding (WELD-2267) and RequestContextController built-in bean...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very pleased to announce the first &lt;strong&gt;Beta&lt;/strong&gt; version of Weld &lt;strong&gt;3.0.0&lt;/strong&gt; (CDI 2.0).
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331387&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an important milestone.
CDI 2.0 is now considered &quot;feature complete&quot; and so the next Weld 3 versions should be mostly dedicated to cleanup and optimization.
The next version will be Weld &lt;strong&gt;3.0.0.CR1&lt;/strong&gt; (ETA in mid January).
Finally, we would like to release Weld &lt;strong&gt;3.0.0.Final&lt;/strong&gt; in early February.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_and_noteworthy&quot;&gt;New and noteworthy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;javax.enterprise.inject.spi.InterceptionFactory&lt;/code&gt; implementation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2257&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2257&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProcessSyntheticObserverMethod&lt;/code&gt; container lifecycle event (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2279&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2279&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BeforeDestroyed&lt;/code&gt; event fired before a context is actually destroyed (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2269&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2269&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;trimmed&quot; bean archives (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2268&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2268&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;context control - &lt;code&gt;ActivateRequestContext&lt;/code&gt; interceptor binding (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2267&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2267&lt;/a&gt;) and &lt;code&gt;RequestContextController&lt;/code&gt; built-in bean (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2266&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2266&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProcessSyntheticBean&lt;/code&gt; container lifecycle event (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2265&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2265&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;few proposals did not make it into CDI 2.0 and so we enhanced the Weld API:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.inject.WeldInstance&lt;/code&gt; (already part of Weld 2.4 API)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.interceptor.WeldInvocationContext&lt;/code&gt; allows to obtain a set of interceptor bindings for a lifecycle callback, business method, timeout method, or constructor (see also &lt;a href=&quot;https://issues.jboss.org/browse/CDI-468&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI-468&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.bootstrap.event.WeldAfterBeanDiscovery&lt;/code&gt; allows to obtain an &lt;code&gt;InterceptorConfigurator&lt;/code&gt; to configure a new &lt;code&gt;Interceptor&lt;/code&gt; bean&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Beta1/wildfly-10.1.0.Final-weld-3.0.0.Beta1-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Beta1/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331387&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/11/18/weld-241Final/</id>
<title>Weld 2.4.1.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-11-18T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/11/18/weld-241Final/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
The development of Weld 3 (CDI 2) is underway.
However, we don&#8217;t forget about the maintenance of the stable branch of Weld!
So I am very pleased to announce the first bugfix version of Weld 2.4 (CDI 1.2).
See also the release details.
Thanks to everyone involved in this release!


Notable fixes and improvements:




removed false positive warning about Jandex version used (WELD-2231)


fixed Groovy support - only filter out relevant methods from Groovy objects when generating bean proxies (WELD-2255)


optimized proxy class generation for "large classes" (WELD-2244)


improved the way Weld configuration info is logged (WELD-2238)


Weld SE



added support for nested directories in uber jars, e.g. Spring Boot jar...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The development of &lt;strong&gt;Weld 3&lt;/strong&gt; (CDI 2) is underway.
However, we don’t forget about the maintenance of the stable branch of Weld!
So I am very pleased to announce the first bugfix version of &lt;strong&gt;Weld 2.4&lt;/strong&gt; (CDI 1.2).
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331553&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;removed false positive warning about Jandex version used (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2231&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2231&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fixed Groovy support - only filter out relevant methods from Groovy objects when generating bean proxies (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2255&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2255&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optimized proxy class generation for &quot;large classes&quot; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2244&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2244&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;improved the way Weld configuration info is logged (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2238&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2238&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;added support for nested directories in uber jars, e.g. Spring Boot jar (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2254&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2254&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow to use &lt;code&gt;CDI.getBeanManager()&lt;/code&gt; after &lt;code&gt;BeforeBeanDiscovery&lt;/code&gt; is fired (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2256&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2256&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;don’t abort container initialization if &lt;code&gt;JandexClassFileServices&lt;/code&gt; is unable to load an annotation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2232&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2232&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet - document the usage of &lt;code&gt;org.jboss.weld.environment.container.class&lt;/code&gt; init param (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2236&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2236&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.1.Final/wildfly-10.1.0.Final-weld-2.4.1.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331553&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/10/25/tip3-performance/</id>
<title>Weld Tip 3 - Boost performance of Weld apps</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-10-25T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/10/25/tip3-performance/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="tips"></category>
<summary>
Contents

Bootstrap

Discovery mode
Extensions
Jandex


Runtime

Identify problematic components easily
Lazy initialization of bean instances
Drawbacks of @Dependent pseudo-scope
Mapping CDI contexts to HTTP requests
Bean identifier index optimization





In this article we&#8217;re going to dive into various performance aspects of CDI applications.
As you&#8217;ve probably noticed performance testing is sometimes tricky.
First of all, it&#8217;s difficult to create a meaningful benchmark.
One should understand the JVM specifics (the need for warmup, garbage collection, JVM settings, etc.) and also use appropriate tools (e.g. JMH for microbenchmarks) accordingly.
But even that usually proves to be unsufficient.
One should also run the test in a relevant context (data, load, etc.).
Performance specialists also say that&#8217;s it&#8217;s good to...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_bootstrap&quot;&gt;Bootstrap&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_discovery_mode&quot;&gt;Discovery mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jandex&quot;&gt;Jandex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_runtime&quot;&gt;Runtime&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_identify_problematic_components_easily&quot;&gt;Identify problematic components easily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_lazy_initialization_of_bean_instances&quot;&gt;Lazy initialization of bean instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_drawbacks_of_dependent_pseudo_scope&quot;&gt;Drawbacks of &lt;code&gt;@Dependent&lt;/code&gt; pseudo-scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_mapping_cdi_contexts_to_http_requests&quot;&gt;Mapping CDI contexts to HTTP requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_bean_identifier_index_optimization&quot;&gt;Bean identifier index optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article we’re going to dive into various performance aspects of CDI applications.
As you’ve probably noticed performance testing is sometimes tricky.
First of all, it’s difficult to create a meaningful benchmark.
One should understand the JVM specifics (the need for warmup, garbage collection, JVM settings, etc.) and also use appropriate tools (e.g. &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JMH&lt;/a&gt; for microbenchmarks) accordingly.
But even that usually proves to be unsufficient.
One should also run the test in a relevant context (data, load, etc.).
Performance specialists also say that’s it’s good to avoid premature optimizations but keep performance aspects in mind when tuning the &quot;final&quot; code.
But all these considerations are out of scope of this article.
Let’s go through several areas where CDI affects the performance of your application and discuss the possibilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bootstrap&quot;&gt;Bootstrap&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During bootstrap the overhead of a framework should be minimal so that it does not &lt;em&gt;slow down&lt;/em&gt; the application startup and also does not eat all the memory available.
However, CDI needs to do all that magic behind the scenes - read annotations, build and validate metadata, etc.
The following sections describe what could be done to minimize the impact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_discovery_mode&quot;&gt;Discovery mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In CDI 1.0 there was only one &lt;em&gt;&quot;discovery mode&quot;&lt;/em&gt;.
How does it work?
Simply put: find all bean archives (containing &lt;code&gt;beans.xml&lt;/code&gt;), discover and process all the found classes (identify beans, etc.).
Needless to say, this might be a performance problem for large applications with thousands of classes.
In CDI 1.1+ we call this mode &lt;code&gt;all&lt;/code&gt; and a bean archive with this mode is called &lt;strong&gt;EXPLICIT&lt;/strong&gt;.
Since CDI 1.1+ a new discovery mode - &lt;code&gt;annotated&lt;/code&gt; - can be used.
The difference is that if this mode is used only classes with a &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bean_defining_annotations&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bean defining annotation&lt;/a&gt; are considered.
In other words, a component must be explicitly designated.
A bean archive with this mode is called &lt;strong&gt;IMPLICIT&lt;/strong&gt;.
To make things a little bit more complicated, an implicit bean archive does not have to contain a &lt;code&gt;beans.xml&lt;/code&gt; file at all.
One class with a bean defining annotation or a session bean is enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implicit bean archive has pros and cons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-o-up&quot; /&gt;&lt;/span&gt; saves a lot of memory if an archive contains a lot of classes which should NOT become beans (the container does not have to store the metadata)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-o-up&quot; /&gt;&lt;/span&gt; speeds up the bootstrap (the container does not have to process all the types, fire events like &lt;code&gt;ProcessBean&lt;/code&gt;, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot; /&gt;&lt;/span&gt; does not fire &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; for all types from the bean archive; this breaks some extensions (e.g. &lt;code&gt;MessageBundleExtension&lt;/code&gt; from DeltaSpike)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot; /&gt;&lt;/span&gt; does not pick up &lt;code&gt;@javax.inject.Singleton&lt;/code&gt; beans (it’s not a bean defining annotation)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;CONCLUSION&lt;/strong&gt;: If possible, use the &lt;code&gt;annotated&lt;/code&gt; discovery mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Most Weld-based runtimes allow to suppress implicit bean archives without &lt;code&gt;beans.xml&lt;/code&gt;, i.e. to require the &lt;code&gt;beans.xml&lt;/code&gt; file in bean archives so that it’s not necessary to scan all the parts of the application. See also &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#4&quot;&gt;FAQ&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If it’s not possible to use &lt;code&gt;annotated&lt;/code&gt; mode, you can try a Weld-specific feature to conserve memory used: &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#veto-types-without-bean-defining-annotation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Veto types without bean defining annotation&lt;/a&gt;.
A similar solution is going to be standardized in CDI 2.0 (see also &lt;a href=&quot;https://issues.jboss.org/browse/CDI-420&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI-420&lt;/a&gt;).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_extensions&quot;&gt;Extensions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CDI portable extensions are essential integration points.
And users love integrated technologies.
However, the more extensions the more work must be done during bootstrap.
For example, there is a &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; container lifecycle event.
This event is fired:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for every type in an EXPLICIT bean archive,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for every session bean and every type with a bean defining annotation in an IMPLICIT bean archive.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The delivery might be restricted by means of type arguments, e.g. for observer &lt;code&gt;void observeNumbers(@Observes ProcessAnnotatedType&amp;lt;? extends Number&amp;gt; event)&lt;/code&gt; an extension will be notified for every class assignable to &lt;code&gt;Number&lt;/code&gt;.
However, if you do &lt;code&gt;&amp;lt;T&amp;gt; void observe(@Observes ProcessAnnotatedType&amp;lt;T&amp;gt; event)&lt;/code&gt; your extension will be notified for every class that is discovered.
Now if we have an application with one EXPLICIT bean archive with 2000 classes, then a specific observer method on such extesion will be called 2000x.
And if there are three similar extensions, the CDI container will have to create 2000 events and notify 6000 observers.
This should be ok unless the observer logic is overly complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;CONCLUSION&lt;/strong&gt;: Pay attention to extensions used in your application.
If you wonder what extensions are in service, use for example Weld Probe observers view or fired events view together with &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#config-dev-mode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;org.jboss.weld.probe.eventMonitor.containerLifecycleEvents&lt;/code&gt; enabled&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If possible, don’t use the extensions which observe all the annotated types from your application, i.e. which defined something like &lt;code&gt;void observe(@Observes ProcessAnnotatedType&amp;lt;?&amp;gt; event)&lt;/code&gt;.
Since CDI 1.1 &lt;code&gt;@WithAnnotations&lt;/code&gt; should be used to restrict the set of types an extension is going to process. Weld Probe warns you about these extensions.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jandex&quot;&gt;Jandex&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some environments (WildFly, Weld SE, and more) Weld can leverage an &quot;offline reflection library&quot;, such as &lt;a href=&quot;https://github.com/wildfly/jandex&quot; target=&quot;&amp;lt;em&amp;gt;blank&quot;&gt;Jandex&lt;/a&gt;, to speed up the scanning process.
These libraries allow to effectively filter classes &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#what_classes_are_beans&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;which are not beans&lt;/a&gt; and vetoed classes.
It works like this: Jandex generates an index (scans the bytecode) and Weld is using this index to filter out useless classes.
As a result Weld does not even have to _load the classes&lt;/p&gt; or use &lt;em&gt;reflection API&lt;/em&gt; to detect types which should be ignored.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In Weld SE and Servlet it’s also possible to generate the Jandex index beforehand, e.g. using the &lt;a href=&quot;https://github.com/wildfly/jandex#user-content-using-the-ant-task-to-index-your-project&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ant task&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_runtime&quot;&gt;Runtime&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In runtime the overhead of a framework should be minimal so that it’s not an application bottleneck.
However, CDI needs to do all that magic behind the scenes - create bean instances, manage contexts, intercept and decorate invocations, etc.
The following sections describe what could be done to minimize the impact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_identify_problematic_components_easily&quot;&gt;Identify problematic components easily&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before you start a profiler or a similar tool, it’s a good idea to identify all the CDI components involved in a problematic &quot;request&quot;.
This means all the beans, observer methods, interceptors and decorators.
The good start might be the Weld Probe invocation trees view.
An invocation tree shows all the business method invocations (including producers, disposers and observer methods).
Once you spot a problematic component, you can check the business logic and associated interceptors and decorators.
Sometimes profilers are just an overkill.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_lazy_initialization_of_bean_instances&quot;&gt;Lazy initialization of bean instances&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld initializes bean instances of normal scoped beans lazily.
In other words, when injecting a normal scoped bean (&lt;code&gt;@RequestScoped&lt;/code&gt;, &lt;code&gt;@ApplicationScoped&lt;/code&gt;, etc.) a new instance is not created until actually used.
Instead, a shared client proxy is injected.
This proxy invokes a method upon the correct bean instance (created if necessary).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Having many injection points resolving to normal scoped beans does not necessarily mean additional overhead associated with bean instance creation.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example, an &lt;code&gt;OrderProcessor&lt;/code&gt; instance is not created until its &lt;code&gt;OrderProcess.process()&lt;/code&gt; method is called:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
class OrderProcessor {
  @PostConstruct
  void init() {
    // Do some expensive initialization logic
  }
  void process() {
    // Business logic
  }
}
@RequestScoped
class OrderService {
  @Inject
  OrderProcessor processor; // A shared client proxy is injected

  void create(Order order) {
    if (order.isValid()) {
        // Processor is not initialized unless we have a valid order
        processor.process(order);
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Weld’s session context is also initilized lazily and doesn’t require an HTTP session to actually exist until a bean instance must be written (i.e. until a method of a &lt;code&gt;@SessionScoped&lt;/code&gt; bean is invoked).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_drawbacks_of_dependent_pseudo_scope&quot;&gt;Drawbacks of &lt;code&gt;@Dependent&lt;/code&gt; pseudo-scope&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From performance point of view &lt;code&gt;@Dependent&lt;/code&gt; is NOT a best fit for:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot; /&gt;&lt;/span&gt; a bean that declares a producer which is frequently used (i.e. the produced bean is created very often)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot; /&gt;&lt;/span&gt; a bean that declares an observer method which is frequently notified (i.e. the event is fired very often)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot; /&gt;&lt;/span&gt; a bean which is used in EL expressions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For all these cases, a new &lt;code&gt;@Dependent&lt;/code&gt; bean instance is created to handle the logic and destroyed when the invocation/evaluation completes.
In other words, the bean instances are not reused.
That’s not necessarily a problem if a bean does not have an &quot;expensive&quot; initialization or depends on others &quot;heavyweight&quot; components.
But very often, a wider scope is more suitable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mapping_cdi_contexts_to_http_requests&quot;&gt;Mapping CDI contexts to HTTP requests&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, bult-in CDI contexts are activated at the beginning of an HTTP request processing and deactivated once the processing finishes.
This might be an unnecessary overhead in certain situations, e.g. when serving static resources (images, JavaScript, etc.).
Weld allows to activate the contexts only for a subset of requests only.
A regular expression may be used for filtering HTTP requests that should have contexts active during their processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;web-app version=&quot;3.1&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee/&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&amp;gt;
    &amp;lt;context-param&amp;gt;
        &amp;lt;param-name&amp;gt;org.jboss.weld.context.mapping&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;.*\.html&amp;lt;/param-value&amp;gt; &amp;lt;!-- Only activate contexts for resources with html suffix, e.g. /some/path.html --&amp;gt;
    &amp;lt;/context-param&amp;gt;
&amp;lt;/web-app&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_bean_identifier_index_optimization&quot;&gt;Bean identifier index optimization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This optimization is used to &lt;strong&gt;reduce the HTTP session replication overhead&lt;/strong&gt; (clustering use case).
Simply put: Weld tries to minimize the amount of bytes send over the network.
However, the inconsistency detection mechanism may cause problems in environments where application stop does not imply HTTP session destruction.
Thus it’s disabled by default in Servlet containers.
See also the &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#_bean_identifier_index_optimization&quot;&gt;reference guide&lt;/a&gt; for more info.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/10/07/tip2-devmode/</id>
<title>Weld Tip 2 - Development Mode</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-10-07T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/10/07/tip2-devmode/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="tips"></category>
<summary>
Contents

How to enable the development mode

Web application
WildFly
Weld SE


How does it actually work?
Probe UI
What if I don&#8217;t have a webapp?
Does it work offline?



In this article we&#8217;re going to cover the special mode for application development.
When enabled, a built-in tool called Probe provides a detailed insight into internals of a CDI application.
Probe makes it easy to inspect:




bean archives


beans and their properties such as qualifiers, stereotypes and name


a graph of bean dependencies


observers and producers declared by beans


interceptors and decorators bound to a bean


extensions


information about current contextual instances


tracking of invocations and invocation trees


tracking of fired events


Weld configuration


and more!




Ok, now let&#8217;s get it working!


How to...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_how_to_enable_the_development_mode&quot;&gt;How to enable the development mode&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_web_application&quot;&gt;Web application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_wildfly&quot;&gt;WildFly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_weld_se&quot;&gt;Weld SE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_how_does_it_actually_work&quot;&gt;How does it actually work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_probe_ui&quot;&gt;Probe UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_what_if_i_dont_have_a_webapp&quot;&gt;What if I don’t have a webapp?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#probe-offline&quot;&gt;Does it work offline?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article we’re going to cover the &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/devmode.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;special mode for application development&lt;/a&gt;.
When enabled, a built-in tool called &lt;strong&gt;Probe&lt;/strong&gt; provides a detailed insight into internals of a CDI application.
Probe makes it easy to inspect:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bean archives&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;beans and their properties such as qualifiers, stereotypes and name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a graph of bean dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;observers and producers declared by beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;interceptors and decorators bound to a bean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;extensions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;information about current contextual instances&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tracking of invocations and invocation trees&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tracking of fired events&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and more!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, now let’s get it working!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_enable_the_development_mode&quot;&gt;How to enable the development mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No surprise that the development mode is &lt;em&gt;DISABLED&lt;/em&gt; by default.
It should &lt;em&gt;NEVER&lt;/em&gt; be used in production as it may have negative impact on performance and/or represent a potential security risk.
Note that if you successfully enable the development mode you should see &lt;code&gt;Weld Development Mode: ENABLED&lt;/code&gt; warning in the log during application bootstrap.
Make sure to disable the development mode before deploying to production!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_web_application&quot;&gt;Web application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For any web application, set the Servlet initialization parameter &lt;code&gt;org.jboss.weld.development&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;web-app&amp;gt;
    &amp;lt;context-param&amp;gt;
        &amp;lt;param-name&amp;gt;org.jboss.weld.development&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt;
    &amp;lt;/context-param&amp;gt;
&amp;lt;/web-app&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wildfly&quot;&gt;WildFly&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since WildFly 10 it’s also possible to enable the Weld development mode globally (i.e. for all the applications deployed) by setting &lt;code&gt;development-mode&lt;/code&gt; attribute to true:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;/subsystem=weld:write-attribute(name=development-mode,value=true)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;https://docs.jboss.org/author/display/WFLY10/CDI+Reference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WildFly CDI Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_weld_se&quot;&gt;Weld SE&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a Java SE application, set the system property &lt;code&gt;org.jboss.weld.development&lt;/code&gt; to true:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;java -cp myCoolApp.jar -Dorg.jboss.weld.development=true com.foo.MyMain&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or use the &lt;code&gt;Weld.property()&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;org.jboss.weld.environment.se.Weld;

public static void main(String[] args) {
   Weld weld = new Weld().property(&quot;org.jboss.weld.development&quot;, true);
   try (WeldContainer container = weld.initialize()) {
      ...
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_does_it_actually_work&quot;&gt;How does it actually work?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Probe collects CDI-related data from your application and then makes the data available through the &lt;em&gt;REST API&lt;/em&gt;, eventually through the &lt;em&gt;MXBean&lt;/em&gt; of name &lt;code&gt;org.jboss.weld.probe:type=JsonData,context=ID&lt;/code&gt; where ID should be replaced with an idenfitier of an application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_probe_ui&quot;&gt;Probe UI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Probe has also a &lt;em&gt;web UI&lt;/em&gt; (single-page application) available at &lt;code&gt;{webapp-context-path}/weld-probe&lt;/code&gt; (once your webapp starts), e.g. &lt;code&gt;&lt;a href=&quot;http://localhost:8080/weld-numberguess/weld-probe&quot; class=&quot;bare&quot;&gt;http://localhost:8080/weld-numberguess/weld-probe&lt;/a&gt;&lt;/code&gt;.
By default, Probe also embeds a tiny information bar directly into the application’s HTML output.
That makes it easy to navigate to Probe directly from the application anytime.
Furthermore, if invocation tracking is enabled, the information bar helps navigate directly to the invocation tree related to the request that rendered the output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The best place to start is probably the &lt;code&gt;Beans&lt;/code&gt; view&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may also discover the observer methods declared by an extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitor all the fired events and track which observer methods a particular event was delivered to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And more…​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We believe the UI is quite intuitive but feel free to ask questions on any channel (irc, gitter, mailing list, etc.).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There are some configuration properties which allow to tune or disable Probe features, e.g. to restrict the set of components which will be monitored. See also &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#config-dev-mode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Development Mode Configuration&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_if_i_dont_have_a_webapp&quot;&gt;What if I don’t have a webapp?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing is lost!
JMX and &lt;a href=&quot;https://github.com/weld/weld-probe-client-adapter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;weld-probe-client-adapter&lt;/a&gt; come to rescue.
This &quot;adapter&quot; allows to reuse the default HTML UI even if there is no REST API available (non-web environments).
The adapter either connects to a JMX server (&lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#config-dev-mode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Probe JMX support must be enabled&lt;/a&gt;) or loads data from an exported file (see also &lt;a href=&quot;#probe-offline&quot;&gt;Does it work offline?&lt;/a&gt;), then starts an embedded Undertow webserver instance and exposes the default HTML client but using the data from the first step.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;probe-offline&quot;&gt;Does it work offline?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes it’s not possible to inspect a running system (e.g. due to security reasons).
Probe allows to &lt;em&gt;export&lt;/em&gt; the collected data and inspect it &lt;em&gt;offline&lt;/em&gt;.
There are two ways to export the data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Using REST API: HTTP GET &lt;code&gt;{webapp-context-path}/weld-probe/export&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure Probe to export data after deployment (see also &lt;code&gt;org.jboss.weld.probe.exportDataAfterDeployment&lt;/code&gt; property in &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#config-dev-mode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Development Mode Configuration&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And now use the &lt;a href=&quot;https://github.com/weld/weld-probe-client-adapter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;weld-probe-client-adapter&lt;/a&gt; again:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;java -jar weld-probe-client-adapter-1.0.0.Final-shaded.jar /home/weld/weld-probe-export.zip&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/10/01/tip1-logging/</id>
<title>Weld Tip 1 - Logging</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-10-01T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/10/01/tip1-logging/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="tips"></category>
<summary>
Contents

Motivation
Under the hood
Set the log level and use categories to filter messages
Monitoring bootstrap

Registered beans
Actions performed by extensions





This is the first article from a series of short articles covering some useful Weld features.
In this article we talk about logging.
The topics for the next articles include: DEVELOPMENT MODE, PERFORMANCE, NON-EE ENVIRONMENTS and TESTING.


Motivation


Logging is usually no fancy stuff.
But very often it&#8217;s the best thing to start with if problems arise.
Moreover, it&#8217;s the easiest form of debugging.


In this article you will find:




Under the hood - how to control and configure the output


Set the log level and use categories to filter messages - how...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#under_the_hood&quot;&gt;Under the hood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#filter&quot;&gt;Set the log level and use categories to filter messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bootstrap&quot;&gt;Monitoring bootstrap&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_registered_beans&quot;&gt;Registered beans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_actions_performed_by_extensions&quot;&gt;Actions performed by extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first article from a series of short articles covering some useful Weld features.
In this article we talk about logging.
The topics for the next articles include: &lt;strong&gt;DEVELOPMENT MODE&lt;/strong&gt;, &lt;strong&gt;PERFORMANCE&lt;/strong&gt;, &lt;strong&gt;NON-EE ENVIRONMENTS&lt;/strong&gt; and &lt;strong&gt;TESTING&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Logging is usually no fancy stuff.
But very often it’s &lt;em&gt;the best thing to start with if problems arise&lt;/em&gt;.
Moreover, it’s the easiest form of debugging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article you will find:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#under_the_hood&quot;&gt;Under the hood&lt;/a&gt; - how to control and configure the output&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#filter&quot;&gt;Set the log level and use categories to filter messages&lt;/a&gt; - how to keep logs small and to the point&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#bootstrap&quot;&gt;Monitoring bootstrap&lt;/a&gt; - registered beans, actions performed by extensions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;under_the_hood&quot;&gt;Under the hood&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld is using &lt;a href=&quot;https://developer.jboss.org/wiki/JBossLoggingTooling&quot;&gt;JBoss Logging&lt;/a&gt;.
This is an abstraction layer wchich does not &quot;write&quot; any log messages at all.
Instead, it effectively constructs a log message and then delegates to a back-end logging framework.
The supported frameworks include &lt;a href=&quot;https://developer.jboss.org/wiki/StandaloneJBossLogManager&quot;&gt;jboss-logmanager&lt;/a&gt;, &lt;a href=&quot;http://logging.apache.org/log4j/2.x/&quot;&gt;Log4j&lt;/a&gt;, &lt;a href=&quot;http://www.slf4j.org/&quot;&gt;SLF4J&lt;/a&gt; and JDK logging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So which logging framework is actually used to write the Weld messages?
Well, it depends on the environment.
In a &lt;strong&gt;Java EE container&lt;/strong&gt; (e.g. WildFly) the logging configuration is under the direction of the container.
You should follow the container-specific guides to change the configuration (see for example &lt;a href=&quot;https://docs.jboss.org/author/display/WFLY10/Logging+Configuration&quot;&gt;WildFly - Logging Configuration&lt;/a&gt; and &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#7&quot;&gt;How do I enable debug logging for Weld in a specific container?&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A web application deployed to a &lt;strong&gt;servlet container&lt;/strong&gt; usually bundles a logging framework and possibly some configuration file.
In this case, the configuration is in hands of the application developer.
If no logging framework is bundled follow the container-specific guides to change the configuration (e.g. &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.0-doc/logging.html&quot;&gt;Logging in Tomcat&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A system property &lt;code&gt;org.jboss.logging.provider&lt;/code&gt; can be used to specify the logging framework directly. If not set, the JBoss Logging will attempt to find the &quot;best match&quot; on the classpath. See also &lt;a href=&quot;https://github.com/jboss-logging/jboss-logging/blob/master/src/main/java/org/jboss/logging/LoggerProviders.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LoggerProviders&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;strong&gt;Java SE&lt;/strong&gt; the situation is very similar to servlet containers except the class loading is usually even less complicated (see also &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#10&quot;&gt; How do I enable debug logging for Weld SE?&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;filter&quot;&gt;Set the log level and use categories to filter messages&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default log level is usually &lt;code&gt;INFO&lt;/code&gt;.
Weld does not log that much information with this level.
You will have to set the log level to &lt;code&gt;DEBUG&lt;/code&gt; (or even &lt;code&gt;TRACE&lt;/code&gt;) to see what’s going on in your application.
If you set the level globally (for all frameworks and libraries), the log files will be bloated and it will be very hard to get some relevant info from there.
If you set the level for Weld only (i.e. for &lt;code&gt;org.jboss.weld&lt;/code&gt;), it should be better.
Moreover, it’s possible to use categories to filter messages from a particular &quot;domain&quot;.
Weld log messages are grouped into several categories:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.Bootstrap&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.Validator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.Bean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.Context&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.jboss.weld.El&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and others (see also &lt;a href=&quot;https://github.com/weld/core/blob/master/impl/src/main/java/org/jboss/weld/logging/Category.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;org.jboss.weld.logging.Category&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So for example, if you’re only interested in log messages related to &lt;strong&gt;EL resolution&lt;/strong&gt; set the log level for the &lt;code&gt;org.jboss.weld.El&lt;/code&gt; category to &lt;code&gt;TRACE&lt;/code&gt; (or level with corresponding priority).
Another useful example is the check of &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#_weld_configuration&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Weld configuration&lt;/a&gt;.
Simply set the log level to &lt;code&gt;DEBUG&lt;/code&gt; and filter the &lt;code&gt;org.jboss.weld.Configuration&lt;/code&gt; category:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;DEBUG [Configuration] WELD-001907: Reading properties file: test.war/WEB-INF/classes/weld.properties
DEBUG [Configuration] WELD-001903: Configuration key RESOLUTION_CACHE_SIZE already set to 1 000 in a source with higher priority, value 500 from system properties is ignored
DEBUG [Configuration] WELD-001904: Unsupported configuration key found and ignored: com.foo.bar
DEBUG [Configuration] WELD-001902: Configuration initialized: {CONCURRENT_DEPLOYMENT=false, RESOLUTION_CACHE_SIZE=1000, RELAXED_CONSTRUCTION=true}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bootstrap&quot;&gt;Monitoring bootstrap&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CDI is designed to fail fast.
An extensive validation is performed during application initialization in order to avoid malicious errors at runtime.
Container usually also logs a lot of interesting info during bootstrap.
Let’s try to set the log level to &lt;strong&gt;DEBUG&lt;/strong&gt; for the &lt;code&gt;org.jboss.weld.Bootstrap&lt;/code&gt; category and see what we get.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_registered_beans&quot;&gt;Registered beans&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As simple as it looks - Weld logs &lt;em&gt;all the beans&lt;/em&gt; found in the application, e.g.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;DEBUG [Bootstrap] WELD-000106: Bean: Managed Bean [class org.jboss.cdi.tck.tests.lookup.dependency.resolution.broken.unsatisfied.Vanilla] with qualifiers [@Any @Default]
DEBUG [Bootstrap] WELD-000106: Bean: Producer Method [String[]] with qualifiers [@BatchProperty @Any] declared as [[UnbackedAnnotatedMethod] @Produces @BatchProperty public org.jberet.creation.BatchBeanProducer.getStringArray(InjectionPoint)]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_actions_performed_by_extensions&quot;&gt;Actions performed by extensions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no doubt that portable extensions are really powerful.
They can change almost anything.
That’s great for framework/libraries developers.
On the other hand, this may cause problems when looking for a bug.
There is an application class provided by a developer but what does the CDI container actually see?
Well, it depends…​ because portable extensions are allowed to redefine this.
And that’s why Weld logs all the &lt;em&gt;&quot;modification&quot;&lt;/em&gt; operations performed by extensions, such as &lt;code&gt;ProcessAnnotatedType.veto()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;DEBUG [Bootstrap] WELD-000148: ProcessAnnotatedType.veto() called by com.foo.MyExtension@50fed5b1 for [BackedAnnotatedType] public class com.foo.Foo&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If your application deploys successfully, you can use &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/devmode.html#devtools&quot;&gt;Development Tools&lt;/a&gt; to inspect the runtime info (will be covered in one of the follow-up articles).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/09/13/weld-240Final/</id>
<title>Weld 2.4.0.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-09-13T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/09/13/weld-240Final/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
I am very pleased to announce the first stable version of Weld 2.4 (CDI 1.2).
See also the release details.
From now on, 2.4 is the current stable version of Weld and 2.3 is not actively developed anymore.
Thanks to everyone involved in this release!


Most of the new features were already introduced in First release candidate of Weld 2.4.
To sum it up:




Removed dependency on com.google.guava:guava


Enhanced version of javax.enterprise.inject.Instance


Veto AnnotatedType not annotated with a bean defining annotation


@ActivateRequestScope interceptor binding moved to Weld API and renamed to @ActivateRequestContext


Improved rolling upgrades support


Events - reflect the output of CDI-494


Probe - allow to filter unused beans


Cleanup, cleanup, cleanup&#8230;&#8203;


Initial...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very pleased to announce the &lt;strong&gt;first stable version of Weld 2.4&lt;/strong&gt; (CDI 1.2).
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331363&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
From now on, 2.4 is the current stable version of Weld and 2.3 is not actively developed anymore.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the new features were already introduced in &lt;a href=&quot;https://weld.cdi-spec.org/news/2016/08/19/weld-240CR1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;First release candidate of Weld 2.4&lt;/a&gt;.
To sum it up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removed dependency on &lt;code&gt;com.google.guava:guava&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Veto &lt;code&gt;AnnotatedType&lt;/code&gt; not annotated with a bean defining annotation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ActivateRequestScope&lt;/code&gt; interceptor binding moved to Weld API and renamed to &lt;code&gt;@ActivateRequestContext&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved rolling upgrades support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Events - reflect the output of CDI-494&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe - allow to filter unused beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cleanup, cleanup, cleanup…​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initial Java 9 support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, 2.4.0.Final allows to export the Probe development tool data (to be discussed in one of the following blog posts) and fixes a minor problem in non-EE environments (see also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2227&quot;&gt;WELD-2227&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the coming weeks, the Weld team is also going to publish &lt;strong&gt;&quot;Weld tips&quot;&lt;/strong&gt; - a series of concise articles.
The intention is to familiarize developers with less known Weld features.
There will be no hot news, just useful existing features (repetition is the mother of wisdom ;-).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.0.Final/wildfly-10.1.0.Final-weld-2.4.0.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331363&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/08/19/weld-240CR1/</id>
<title>First release candidate of Weld 2.4</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-08-19T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/08/19/weld-240CR1/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
Contents

Removed dependency on com.google.guava:guava
Enhanced version of javax.enterprise.inject.Instance
Veto AnnotatedType not annotated with bean defining annotation
@ActivateRequestScope moved to Weld API
Improved rolling upgrades support
Events - reflect the output of CDI-494
Probe - allow to filter unused beans
Cleanup
Initial Java 9 support
Bugs
WildFly Patch



I am pleased to announce the first release candidate of Weld 2.4 (CDI 1.2).
See also the release details.
Thanks to everyone involved in this release!


Removed dependency on com.google.guava:guava


Weld does not depend on com.google.guava:guava anymore (actually, Weld 3 does not depend on guava since 3.0.0.Alpha2).
This significantly reduces the footprint of both Weld SE and Weld Servlet.
The dependency is also not bundled with shaded artifacts for Weld...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_removed_dependency_on_com_google_guavaguava&quot;&gt;Removed dependency on &lt;code&gt;com.google.guava:guava&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_enhanced_version_of_javax_enterprise_inject_instance&quot;&gt;Enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_veto_annotatedtype_not_annotated_with_bean_defining_annotation&quot;&gt;Veto &lt;code&gt;AnnotatedType&lt;/code&gt; not annotated with bean defining annotation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_activaterequestscope_moved_to_weld_api&quot;&gt;&lt;code&gt;@ActivateRequestScope&lt;/code&gt; moved to Weld API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_improved_rolling_upgrades_support&quot;&gt;Improved rolling upgrades support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_events_reflect_the_output_of_cdi_494&quot;&gt;Events - reflect the output of CDI-494&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_probe_allow_to_filter_unused_beans&quot;&gt;Probe - allow to filter unused beans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_cleanup&quot;&gt;Cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_initial_java_9_support&quot;&gt;Initial Java 9 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_bugs&quot;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_wildfly_patch&quot;&gt;WildFly Patch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am pleased to announce the first release candidate of Weld 2.4 (CDI 1.2).
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12330683&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_removed_dependency_on_com_google_guavaguava&quot;&gt;Removed dependency on &lt;code&gt;com.google.guava:guava&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld does not depend on &lt;code&gt;com.google.guava:guava&lt;/code&gt; anymore (actually, Weld 3 does not depend on guava since 3.0.0.Alpha2).
This significantly reduces the footprint of both Weld SE and Weld Servlet.
The dependency is also not bundled with shaded artifacts for Weld SE and Weld Servlet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_enhanced_version_of_javax_enterprise_inject_instance&quot;&gt;Enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld now provides &lt;code&gt;org.jboss.weld.inject.WeldInstance&lt;/code&gt; - an enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;.
There are three additional methods - &lt;code&gt;getHandler()&lt;/code&gt;, &lt;code&gt;handlers()&lt;/code&gt; and &lt;code&gt;isResolvable()&lt;/code&gt;.
A handler allows to inspect the metadata of the relevant bean and to destroy the underlying contextual instance.
&lt;code&gt;isResolvable()&lt;/code&gt; is just a convenient method - a replacement for &lt;code&gt;!isUnsatisfied() &amp;amp;&amp;amp; !isAmbiguous()&lt;/code&gt;.
For more details see also &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.CR1/en-US/html/injection.html#_enhanced_version_of_literal_javax_enterprise_inject_instance_literal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the reference guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;WeldInstance&lt;/code&gt; is automatically available in Weld SE and Weld Servlet where the Weld API is always on the class path.
It is also available in Weld-powered EE containers. In this case, users would have to compile their application against the Weld API and exclude the Weld API artifact from the deployment (e.g. use provided scope in Maven).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This functionality is based on a new proposal for &lt;a href=&quot;https://issues.jboss.org/browse/CDI-589&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI-589&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_veto_annotatedtype_not_annotated_with_bean_defining_annotation&quot;&gt;Veto &lt;code&gt;AnnotatedType&lt;/code&gt; not annotated with bean defining annotation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes it might be useful to process all types during bootstrap, i.e. fire/observe &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; event for each Java class discovered, but veto types which are &lt;strong&gt;not annotated with a bean defining annotation&lt;/strong&gt;.
The main reason is that not all classes that meet all of the necessary conditions are intended to become beans.
And so vetoing such types helps to conserve memory used by the container.
Note that if you use &lt;code&gt;bean-discovey-mode=annotated&lt;/code&gt; (implicit bean archive) then no &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; will be fired for any such type because it’s not discovered at all.
And there might be portable extensions which use &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; to extract some important information from classes which are not beans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, Weld allows to use &lt;code&gt;bean-discovey-mode=all&lt;/code&gt; (explicit bean archive) and veto types without a bean defining annotation whose &lt;code&gt;AnnotatedType#getJavaClass().getName()&lt;/code&gt; matches a &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.CR1/en-US/html/configure.html#veto-types-without-bean-defining-annotation&quot;&gt;regular expression&lt;/a&gt;.
In other words, a type is vetoed if its name matches a regular expression and at the same time is not annotated with a bean defining annotation.
This functionality is implemented as a built-in portable extension processing all types from all bean archives (it was already doable using an extension but we believe it’s more convenient to have this functionality out of the box).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a workaround for problems of &lt;code&gt;bean-discovey-mode=annotated&lt;/code&gt; mentioned in &lt;a href=&quot;https://issues.jboss.org/browse/CDI-420&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI-420&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_activaterequestscope_moved_to_weld_api&quot;&gt;&lt;code&gt;@ActivateRequestScope&lt;/code&gt; moved to Weld API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This interceptor binding can be used to activate the request scope within a business method invocation.
It was previously part of the Weld SE but we believe it might be useful in any environment.
See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2150&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2150&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_improved_rolling_upgrades_support&quot;&gt;Improved rolling upgrades support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ViewProfile.jspa?name=lprimak&quot;&gt;Lenny Primak&lt;/a&gt; (a Weld community member - thanks for the report again!) struggled with rolling upgrades on certain application servers (Payara, GlassFish).
Therefore, a new configuration property was introduced.
This property allows to specify a delimiter which is used to abbreviate a bean archive identifier (which is usually derived from the archive name) before used as a part of an identifier of an internal component (such as bean).
See also &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.CR1/en-US/html/configure.html#_rolling_upgrades_id_delimiter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the reference guide&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2064&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2064&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_events_reflect_the_output_of_cdi_494&quot;&gt;Events - reflect the output of CDI-494&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This change reflects the clarification around &lt;code&gt;Event&lt;/code&gt; operations - &lt;em&gt;&quot;A wildcard type is not considered an unresolvable type variable&quot;&lt;/em&gt;.
See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2137&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2137&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/CDI-494&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI-494&lt;/a&gt;.
Simply said, the snippet below and similar ones should now work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Inject Event&amp;lt;List&amp;lt;?&amp;gt;&amp;gt; event;

public void fireLists() {
  List&amp;lt;String&amp;gt; stringList = new ArrayList&amp;lt;&amp;gt;();
  event.fire(stringList);
  List&amp;lt;Integer&amp;gt; intList = new ArrayList&amp;lt;&amp;gt;();
  event.fire(intList);
}

void observeAllLists(@Observes List&amp;lt;?&amp;gt; anyList) {
  // Will be notified
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_probe_allow_to_filter_unused_beans&quot;&gt;Probe - allow to filter unused beans&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Probe development tool now identifies beans which are most likely unused (a bean is considered unused if it has no direct dependents, does not declare any observer or producer methods, is not annotated with &lt;code&gt;@Named&lt;/code&gt; and is not a built-in bean, extension, interceptor or decorator).
This might be useful to identify types suitable for vetoing as mentioned in &lt;a href=&quot;#_veto_code_annotatedtype_code_not_annotated_with_bean_defining_annotation&quot;&gt;[_veto_code_annotatedtype_code_not_annotated_with_bean_defining_annotation]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cleanup&quot;&gt;Cleanup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld has underwent an internal cleanup. A lot of deprecated and unused classes were removed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_initial_java_9_support&quot;&gt;Initial Java 9 support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s now possible to build Weld with Java 9.
Note that this does not mean that Weld is modularized in a &lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jigsaw way&lt;/a&gt;.
It’s just the first step on a long road ;-).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bugs&quot;&gt;Bugs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least - a few bugs were killed.
Weld SE - provided &lt;code&gt;ClassLoader&lt;/code&gt; is also used to load extensions (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2209&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2209&lt;/a&gt;).
&lt;code&gt;AnnotatedTypeValidator&lt;/code&gt; does consider extended interfaces (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2221&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2221&lt;/a&gt;).
Invocation of a JDK8 default method should be intercepted (this only works if using &lt;code&gt;jboss-classfilewriter&lt;/code&gt; 1.2.0.Beta1+, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2093&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2093&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.0.CR1/wildfly-10.0.0.Final-weld-2.4.0.CR1-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.CR1/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12330683&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/07/21/arq-container-weld-releasel/</id>
<title>Arquillian container Weld 2.0.0.Beta1 released!</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-07-21T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/07/21/arq-container-weld-releasel/" rel="alternate" type="text/html" />
<author>
<name>Tomas Remes</name>
</author>
<category term="arquillian"></category>
<category term="testing"></category>
<summary>
We are pleased to announce a release of embedded Arquillian container adapter for Weld.
This container has deserved some love for really long time.
We tried to refactor it and introduced new master branch which now corresponds to the 2.0.0.x version stream.
The original master was branched in 1.0.
There is no more any arquillian-weld-ee-embedded-1.1 or arquillian-weld-se-embedded.
It&#8217;s squashed to one arquillian-weld-embedded and you can configure environments either programmatically or using configuration properties.
See link:https://github.com/arquillian/arquillian-container-weld
This new version is going to be used in Weld as soon as possible.


Maven Coordinates:

    &lt;dependency&gt;
        &lt;groupId&gt;org.jboss.arquillian.container&lt;/groupId&gt;
     ...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are pleased to announce a release of embedded Arquillian container adapter for Weld.
This container has deserved some love for really long time.
We tried to refactor it and introduced new master branch which now corresponds to the 2.0.0.x version stream.
The original master was branched in 1.0.
There is no more any &lt;code&gt;arquillian-weld-ee-embedded-1.1&lt;/code&gt; or &lt;code&gt;arquillian-weld-se-embedded&lt;/code&gt;.
It’s squashed to one &lt;code&gt;arquillian-weld-embedded&lt;/code&gt; and you can configure environments either programmatically or using configuration properties.
See link:https://github.com/arquillian/arquillian-container-weld
This new version is going to be used in Weld as soon as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Maven Coordinates:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;arquillian-weld-embedded&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.0.0.Beta1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would really appreciate if you can try it and let us know your experience!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/07/01/weld-235Final/</id>
<title>Weld 2.3.5.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-07-01T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/07/01/weld-235Final/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<category term="plans"></category>
<summary>
The next version of the stable 2.3 branch has been released!
See also the release details.
Thanks to everyone involved in this release!


We plan to create the 2.4 branch of Weld within a few weeks.
Weld 2.4 will remain a CDI 1.2 implementation.
We would like to do some cleanup (e.g. remove deprecated classes from Weld SE), enhance the API and also add some new features.
See also the list of issues for 2.4.0.CR1.


Notable bugfixes and improvements:




fixed static disposer method invocation (WELD-2176)


fixed private observer/producer/disposer invocation on a bean with decorator (WELD-2179)


fixed Instance.destroy() for dependent session beans (WELD-2148)


fixed ArraySet.hashCode() to comply with java.util.Set.hashCode() contract (WELD-2185)


log veto...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next version of the stable 2.3 branch has been released!
See also &lt;a href=&quot;https://issues.jboss.org/projects/WELD/versions/12330052&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We plan to create the &lt;strong&gt;2.4 branch&lt;/strong&gt; of Weld within a few weeks.
Weld 2.4 will remain a &lt;strong&gt;CDI 1.2&lt;/strong&gt; implementation.
We would like to do some cleanup (e.g. remove deprecated classes from Weld SE), enhance the API and also add some new features.
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12330683&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the list of issues for 2.4.0.CR1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable bugfixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fixed static disposer method invocation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2176&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2176&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fixed private observer/producer/disposer invocation on a bean with decorator (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2179&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2179&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fixed &lt;code&gt;Instance.destroy()&lt;/code&gt; for dependent session beans (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2148&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2148&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fixed &lt;code&gt;ArraySet.hashCode()&lt;/code&gt; to comply with &lt;code&gt;java.util.Set.hashCode()&lt;/code&gt; contract (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2185&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2185&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;log veto actions and modifications of lists returned by &lt;code&gt;AfterTypeDiscovery&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2170&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2170&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2171&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2171&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;log a warning when a class is annotated with a scope but does not declare an appropriate constructor (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2178&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2178&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;support extension deployed in multiple WARs in an EAR (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2143&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2143&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;detect non-unique &lt;code&gt;BeanDeploymentArchive&lt;/code&gt; identifier (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2165&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2165&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fixed extraction of bean archive id - problem occures with embedded Jetty (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2161&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2161&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;improve the way &lt;code&gt;JandexDiscoveryStrategy&lt;/code&gt; identifies an annotation annotated with &lt;code&gt;@NormalScope&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2160&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weld-servlet-core&lt;/code&gt; declares dependency on &lt;code&gt;weld-core-jsf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;do not pass system properties to Weld configuration (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2146&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2146&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe - allow to test bean availability in a given bean archive&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check for example the availability of an alternative in the demo application&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;many documentation and reference guide updates&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.3.5.Final/wildfly-10.0.0.Final-weld-2.3.5.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.5.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12330052&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/06/21/update-on-weld-vertx/</id>
<title>Update on weld-vertx</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-06-21T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/06/21/update-on-weld-vertx/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="vertx"></category>
<category term="integration"></category>
<summary>
This is a follow-up on the article Weld meets Vert.x.
Weld team has just released the first alpha version of weld-vertx (artifacts are available in Maven Central).
Since the last time we talked about weld-vertx two new features were added.
First, it&#8217;s possible to inject the relevant io.vertx.core.Vertx and io.vertx.core.Context instances direcly into beans.
Also there is a new module called weld-vertx-web which extends functionality of weld-vertx-core and io.vertx:vertx-web and allows to register Route handlers discovered during container initialization.
In other words, it&#8217;s possible to configure a Route in a declarative way:



import javax.inject.Inject;

import org.jboss.weld.vertx.web.WebRoute;

import io.vertx.core.Handler;
import io.vertx.ext.web.RoutingContext;

// This annotation is used to configure a Route
@WebRoute("/hello")
public class...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a follow-up on the article &lt;a href=&quot;https://weld.cdi-spec.org/news/2016/04/11/weld-meets-vertx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Weld meets Vert.x&lt;/a&gt;.
Weld team has just released the first alpha version of &lt;a href=&quot;https://github.com/weld/weld-vertx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;weld-vertx&lt;/a&gt; (artifacts are available in &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cweld-vertx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Maven Central&lt;/a&gt;).
Since the last time we talked about &lt;code&gt;weld-vertx&lt;/code&gt; two new features were added.
First, it’s possible to inject the relevant &lt;code&gt;io.vertx.core.Vertx&lt;/code&gt; and &lt;code&gt;io.vertx.core.Context&lt;/code&gt; instances direcly into beans.
Also there is a new module called &lt;code&gt;weld-vertx-web&lt;/code&gt; which extends functionality of &lt;code&gt;weld-vertx-core&lt;/code&gt; and &lt;code&gt;io.vertx:vertx-web&lt;/code&gt; and allows to register &lt;code&gt;Route&lt;/code&gt; handlers discovered during container initialization.
In other words, it’s possible to configure a &lt;code&gt;Route&lt;/code&gt; in a declarative way:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;import javax.inject.Inject;

import org.jboss.weld.vertx.web.WebRoute;

import io.vertx.core.Handler;
import io.vertx.ext.web.RoutingContext;

// This annotation is used to configure a Route
@WebRoute(&quot;/hello&quot;)
public class HelloHandler implements Handler&amp;lt;RoutingContext&amp;gt; {

    @Inject
    SayHelloService service;

    @Override
    public void handle(RoutingContext ctx) {
        ctx.response().setStatusCode(200).end(service.hello());
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The registered handler instances are NOT real bean instances, i.e. they’re not managed by the CDI container (similarly as &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#javaee_components&quot;&gt;Java EE components&lt;/a&gt;).
However, the &lt;strong&gt;dependency injection&lt;/strong&gt; is supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The central point of integration is the &lt;code&gt;org.jboss.weld.vertx.web.WeldWebVerticle&lt;/code&gt;.
This Verticle extends &lt;code&gt;org.jboss.weld.vertx.WeldVerticle&lt;/code&gt; and provides the &lt;code&gt;WeldWebVerticle.registerRoutes(Router)&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt; class MyApp {

     public static void main(String[] args) {
         final Vertx vertx = Vertx.vertx();
         final WeldWebVerticle weldVerticle = new WeldWebVerticle();

         vertx.deployVerticle(weldVerticle, result -&amp;gt; {

             if (result.succeeded()) {
                 // Configure the router after Weld bootstrap finished
                 Router router = Router.router(vertx);
                 router.route().handler(BodyHandler.create());
                 weldVerticle.registerRoutes(router);
                 vertx.createHttpServer().requestHandler(router::accept).listen(8080);
             }
         });
     }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Give it a try and let us know if you have any idea how to extend the functionality of &lt;code&gt;weld-vertx&lt;/code&gt;.
Any feedback is appreciated!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/05/18/enhanced-instance/</id>
<title>Programmatic lookup improvements</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-05-18T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/05/18/enhanced-instance/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="api"></category>
<category term="draft"></category>
<summary>
javax.enterprise.inject.Instance is sometimes invaluable companion.
For example, Instance allows you to handle unsatisfied and ambiguous dependencies gracefully.
E.g. it&#8217;s possible to avoid unnecessary deployment problems:



interface OrderProcessor {
  void process(Order order);
  int getPriority();
}

class OrderService {

  @Inject
  Instance&lt;OrderProcessor&gt; instance;

  void create(Order order) {
    if (!instance.isUnsatisfied() &amp;&amp; !instance.isAmbiguous()) {
        instance.get().process(order);
    } else {
        // Log a warning or throw an exception
    }
  }
}



It is less known that Instance extends Iterable and so it allows to iterate...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt; is sometimes invaluable companion.
For example, &lt;code&gt;Instance&lt;/code&gt; allows you to handle unsatisfied and ambiguous dependencies gracefully.
E.g. it’s possible to avoid unnecessary deployment problems:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;interface OrderProcessor {
  void process(Order order);
  int getPriority();
}

class OrderService {

  @Inject
  Instance&amp;lt;OrderProcessor&amp;gt; instance;

  void create(Order order) {
    if (!instance.isUnsatisfied() &amp;amp;&amp;amp; !instance.isAmbiguous()) {
        instance.get().process(order);
    } else {
        // Log a warning or throw an exception
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is less known that &lt;code&gt;Instance&lt;/code&gt; extends &lt;code&gt;Iterable&lt;/code&gt; and so it allows to iterate through contextual references of beans with the specified combination of required type and qualifiers.
This might be useful if the set of beans satisfying the given type and qualifiers is not known beforehand.
We may also need to resolve ambiguities manually, e.g. inspect all the instances and choose only those matching our needs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
class OrderService {

  @Inject
  @Any
  Instance&amp;lt;OrderProcessor&amp;gt; instance;

  void create(Order order) {
    for (OrderProcessor processor : instance) {
        if (processor.getPriority() &amp;gt; 10) {
            processor.process(order);
        }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another interesting use case might be selecting exactly one implementation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
class OrderService {

  @Inject
  @Any
  Instance&amp;lt;OrderProcessor&amp;gt; instance;

  void create(Order order) {
    List&amp;lt;OrderProcessor&amp;gt; processors = new ArrayList&amp;lt;&amp;gt;();
    for (OrderProcessor processor : instance) {
        processors.add(processor);
    }
    Collections.sort(processors, Comparator.&amp;lt;OrderProcessor&amp;gt; comparingInt(p -&amp;gt; p.getPriority()).reversed());
    // Use the processor with highest priority
    processors.get(0).ping();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This works nice.
But we have to pay extra attention to the scopes.
If a &lt;code&gt;Processor&lt;/code&gt; implementation is &lt;code&gt;@Dependent&lt;/code&gt; a similar usage results in memory leaks.
What’s the reason?
The &lt;code&gt;Processor&lt;/code&gt; instance is the dependent object of &lt;code&gt;Instance&amp;lt;OrderProcessor&amp;gt;&lt;/code&gt; which is the dependent object of &lt;code&gt;OrderService&lt;/code&gt;.
And so each &lt;code&gt;Instance.get()&lt;/code&gt; will produce a new &lt;code&gt;Processor&lt;/code&gt; bound to the lifecycle of the &lt;code&gt;OrderService&lt;/code&gt;.
To avoid the leak we should always call &lt;code&gt;Instance.destroy()&lt;/code&gt; method in similar cases.
However, &lt;code&gt;Instance.destroy()&lt;/code&gt; always destroys the underlying contextual instance!
Even if you pass e.g. a client proxy of an &lt;code&gt;@ApplicationScoped&lt;/code&gt; bean.
This is not always desirable.
Currently, it’s quite complicated to detect a dependent bean inside the loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To extend the possibilities the Weld team is experimenting with &lt;code&gt;org.jboss.weld.inject.WeldInstance&lt;/code&gt; - an enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;.
There are three new methods we find useful. The first one - &lt;code&gt;getHandler()&lt;/code&gt; - allows to obtain a contextual reference handler which not only holds the contextual reference but also allows to inspect the metadata of the relevant bean and to destroy the underlying contextual instance.
Moreover, the handler implements &lt;code&gt;AutoCloseable&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;import org.jboss.weld.inject.WeldInstance;

class Foo {

  @Inject
  WeldInstance&amp;lt;Bar&amp;gt; instance;

  void doWork() {
    try (Handler&amp;lt;Bar&amp;gt; bar = instance.getHandler()) {
        bar.get().doBusiness();
        // Note that Bar will be automatically destroyed at the end of the try-with-resources statement
    }

    Handler&amp;lt;Bar&amp;gt; bar = instance.getHandler()
    bar.get().doBusiness();
    // Calls Instance.destroy()
    bar.destroy();
  }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next method - &lt;code&gt;handlerIterator()&lt;/code&gt; - returns an iterator over contextual reference handlers. This might be useful if you need more control over contextual references inside the loop:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
class OrderService {

  @Inject
  @Any
  WeldInstance&amp;lt;OrderProcessor&amp;gt; instance;

  void create(Order order) {
    for (Iterator&amp;lt;Handler&amp;lt;OrderProcessor&amp;gt;&amp;gt; iterator = instance.handlerIterator(); iterator.hasNext();) {
            Handler&amp;lt;OrderProcessor&amp;gt; processor = iterator.next();
            processor.get().process(order);
            if (processor.getBean().getScope().equals(Dependent.class)) {
                // Destroy only dependent processors
                processor.destroy();
            }
        }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last one is just a convenient method - &lt;code&gt;isResolvable()&lt;/code&gt; - a replacement for &lt;code&gt;!isUnsatisfied() &amp;amp;&amp;amp; !isAmbiguous()&lt;/code&gt; which is the expression most users are interested in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;class OrderService {

  @Inject
  Instance&amp;lt;OrderProcessor&amp;gt; instance;

  void create(Order order) {
    if (instance.isResolvable()) {
        instance.get().process(order);
    } else {
        // Log a warning or throw an exception
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld team is considering adding &lt;code&gt;org.jboss.weld.inject.WeldInstance&lt;/code&gt; to the Weld API (2.4 and 3.0).
&lt;code&gt;WeldInstance&lt;/code&gt; would be automatically available in Weld SE and Weld Servlet where the Weld API is always on the class path.
It would be also available in Weld-powered EE containers - in this case, users would have to compile their application against the Weld API and exclude the Weld API artifact from the deployment (e.g. use &lt;code&gt;provided&lt;/code&gt; scope in Maven).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2151&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2151&lt;/a&gt; and the work in progress: &lt;a href=&quot;https://github.com/mkouba/core/tree/WELD-2151&quot; class=&quot;bare&quot;&gt;https://github.com/mkouba/core/tree/WELD-2151&lt;/a&gt;.
And feel free to add comments to this blog post.
Any feedback is appreciated!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/04/28/weld-300Alpha16/</id>
<title>Weld 3.0.0.Alpha16</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-04-28T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/04/28/weld-300Alpha16/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<category term="cdi2"></category>
<summary>
The next experimental Weld version has been released!
See also the release details.
Thanks to everyone involved in this release!


This release includes a lot of bugfixes and improvements (e.g. all the notable tasks implemented in the latest stable version: Weld 2.3.4.Final).
However, the main goal of this release is to align with CDI API 2.0.Alpha4, and in particular to implement the current version of "metadata builders" API (CDI-558).
So that everyone can play with the API, discover possibilities and find potential issues.
Note that this release also introduces a non-standard experimental feature: Weld SE synthetic container lifecycle event observers.
So it should be even easier to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next experimental Weld version has been released!
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327858&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes a lot of bugfixes and improvements (e.g. all the notable tasks implemented in the latest stable version: &lt;a href=&quot;https://weld.cdi-spec.org/news/2016/04/22/weld-234Final/&quot;&gt;Weld 2.3.4.Final&lt;/a&gt;).
However, the main goal of this release is to align with CDI API 2.0.Alpha4, and in particular to implement the current version of &quot;metadata builders&quot; API (&lt;a href=&quot;https://issues.jboss.org/browse/CDI-558&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI-558&lt;/a&gt;).
So that everyone can play with the API, discover possibilities and find potential issues.
Note that this release also introduces a non-standard experimental feature: &lt;a href=&quot;https://weld.cdi-spec.org/news/2016/02/08/weld-se-synth-lifecycle-events/&quot;&gt;Weld SE synthetic container lifecycle event observers&lt;/a&gt;.
So it should be even easier to get started - no extension class is needed in Weld SE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_metadata_configurators_basic_ideas&quot;&gt;Metadata configurators - basic ideas&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that we don’t use the term &quot;builder&quot; because there is no &lt;code&gt;build()&lt;/code&gt; method in the API.
Also note that the API is not intended to cover every possible case.
Instead, we would like to help with common tasks.
And if necessary, an extension developer can always use the original replacement methods for more complicated stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IMPORTANT POINTS:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;an extension developer receives a configurator instance from a container lifecycle event&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a configurator instance is always automatically processed at the end of the observer invocation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for &lt;strong&gt;bean discovery events&lt;/strong&gt; (all events starting with &lt;code&gt;Process&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;configureX()&lt;/code&gt; methods return the same configurator instance (for the given observer method invocation)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the configurator is initialized/preconfigured with the component being processed, e.g. &lt;code&gt;ProcessAnnotatedType.configureAnnotatedType()&lt;/code&gt; returns a configurator initialized with &lt;code&gt;ProcessAnnotatedType.getAnnotatedType()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the result of the configurator will automatically replace the original component (e.g. &lt;code&gt;AnnotatedType&lt;/code&gt; in case of &lt;code&gt;ProcessAnnotatedType&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;replacement methods (e.g. &lt;code&gt;ProcessAnnotatedType.setAnnotatedType()&lt;/code&gt;) should not be used together with configurators (&lt;a href=&quot;https://issues.jboss.org/browse/CDI-596&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI-596&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for &lt;strong&gt;application lifecycle events&lt;/strong&gt; (e.g. &lt;code&gt;AfterBeanDiscovery&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;addX()&lt;/code&gt; methods always return a new configurator instance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the configurator is always uninitialized/empty, but we should probably define some default values wherever it makes sense (e.g. &lt;code&gt;Reception&lt;/code&gt; for observer methods)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the result of the configurator will be automatically added (e.g. &lt;code&gt;Bean&lt;/code&gt; in case of &lt;code&gt;AfterBeanDiscovery.addBean()&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have prepared some simple examples - see below.
More advanced examples can be found in &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/tree/master/impl/src/main/java/org/jboss/cdi/tck/tests/extensions/configurators&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the TCK test cases&lt;/a&gt;.
And as usual - feel free to add comments to this blog post. Any feedback is appreciated!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_beforebeandiscovery_example&quot;&gt;BeforeBeanDiscovery example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Singleton
class MyService {
    // This class is not placed in a bean archive
}

class MyExtension implements Extension {

    void beforeBeanDiscovery(@Observes BeforeBeanDiscovery event) {
        // Add MyService to the set of discovered classes and replace @Singleton with @ApplicationScoped
        event.addAnnotatedType(MyService.class.getName(), MyService.class)
               .remove(Singleton.class)
               .add(ApplicationScoped.Literal.INSTANCE);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_processannotatedtype_example&quot;&gt;ProcessAnnotatedType example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;class MyExtension implements Extension {

    void processAnnotatedType(@Observes @WithAnnotations({ Observes.class, ObservesAsync.class }) ProcessAnnotatedType&amp;lt;?&amp;gt; event) {
        // Add interceptor binding to all methods annotated with @Observes or @ObservesAsync
        event.configureAnnotatedType()
                .filterMethods(MyExtension::isObserver)
                .forEach(methodConfigurator -&amp;gt; methodConfigurator.add(Monitored.Literal.INSTANCE))
    }

    static boolean isObserver(AnnotatedMethod&amp;lt;?&amp;gt; annotatedMethod) {
        return annotatedMethod.isAnnotationPresent(Observes.class) || annotatedMethod.isAnnotationPresent(ObservesAsync.class);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_processbeanattributes_example&quot;&gt;ProcessBeanAttributes example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;class MyExtension implements Extension {

    void processBeanAttributes(@Observes ProcessBeanAttributes&amp;lt;?&amp;gt; event) {
        // For all beans remove the IllegalBeanType from the set of bean types
        if (event.getBeanAttributes().getTypes().contains(IllegalBeanType.class)) {
            Set&amp;lt;Type&amp;gt; legalTypes = new HashSet(event.getBeanAttributes().getTypes());
            legalTypes.remove(IllegalBeanType.class);
            event.configureBeanAttributes().types(legalTypes);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_afterbeandiscovery_example&quot;&gt;AfterBeanDiscovery example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;class MyExtension implements Extension {

    void afterBeanDiscovery(@Observes AfterBeanDiscovery event) {
        //  Add a new synthetic observer method - no need to use the fluent API
        ObserverMethodConfigurator&amp;lt;Foo&amp;gt; configurator = event.&amp;lt;Foo&amp;gt;addObserverMethod();
        configurator.observedType(Foo.class);
        configurator.reception(Reception.ALWAYS);
        configurator.transactionPhase(TransactionPhase.IN_PROGRESS);
        configurator.notifyWith((foo) -&amp;gt; System.out.println(&quot;Foo observed: &quot; + foo));

        // Add dependent bean - Integer between 0 and 999
        event.addBean().addType(Integer.class).addQualifier(Random.Literal.INSTANCE)
                .produceWith(() -&amp;gt; new java.util.Random().nextInt(1000))
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha16/wildfly-10.0.0.Final-weld-3.0.0.Alpha16-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Alpha16/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327858&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/04/22/weld-234Final/</id>
<title>Weld 2.3.4.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-04-22T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/04/22/weld-234Final/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
Weld 2.3.4.Final the next version of the stable 2.3 branch has been released!
See also the release details.
Thanks to everyone involved in this release!


Notable bugfixes and improvements:




log important actions performed by extensions (WELD-2134)



for example, if you want to track down all extensions modifying AnnotatedType definitions, then enable the debug logging for Weld and look for messages containing ProcessAnnotatedType.setAnnotatedType() called by &#8230;&#8203;





Conversations - allow to configure the default timeout and the concurrent access timeout (WELD-2113)


recover if a transaction is in progress but a JTA Synchronization callback cannot be registered (WELD-2120)


EJB proxies do not implement private methods anymore (WELD-2119)


interceptor instances used for @AroundConstruct...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 2.3.4.Final the next version of the stable 2.3 branch has been released!
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12329779&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable bugfixes and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;log important actions performed by extensions (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2134&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2134&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for example, if you want to track down all extensions modifying &lt;code&gt;AnnotatedType&lt;/code&gt; definitions, then &lt;a href=&quot;https://weld.cdi-spec.org/documentation/#7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;enable the debug logging for Weld&lt;/a&gt; and look for messages containing &lt;code&gt;ProcessAnnotatedType.setAnnotatedType() called by …​&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conversations - allow to configure the default timeout and the concurrent access timeout (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2113&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2113&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;recover if a transaction is in progress but a JTA Synchronization callback cannot be registered (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2120&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2120&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EJB proxies do not implement private methods anymore (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2119&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2119&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;interceptor instances used for @AroundConstruct are now reused for other types of interception (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2131&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2131&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fixed handling of archives from &lt;code&gt;WEB-INF/lib&lt;/code&gt; on Tomcat 8 with &lt;code&gt;unpackWARs=false&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2122&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2122&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeldTerminalListener&lt;/code&gt; should not throw NPE if injection into listeners is not supported (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2123&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2123&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld SE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;improved support of &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.4.Final/en-US/html/environments.html#_implicit_bean_archive_support_2&quot;&gt;implicit bean archives&lt;/a&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2129&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2129&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there are two new built-in interceptor bindings - &lt;code&gt;@ActivateRequestScope&lt;/code&gt; and &lt;code&gt;@ActivateThreadScope&lt;/code&gt; - to activate the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.4.Final/en-US/html/environments.html#_request_context&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;request scope&lt;/a&gt; or the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.4.Final/en-US/html/environments.html#_thread_context&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;thread scope&lt;/a&gt; within a business method invocation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld builder allows to configure bean archive isolation, development mode and registration of shutdown hook manually (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2135&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2135&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a basic nested archive support was added (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-1930&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-1930&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.3.4.Final/wildfly-10.0.0.Final-weld-2.3.4.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.4.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12329779&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/04/11/weld-meets-vertx/</id>
<title>Weld meets Vert.x</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-04-11T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/04/11/weld-meets-vertx/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="vertx"></category>
<category term="integration"></category>
<summary>
Vert.x defines itself as "a toolkit for building reactive applications on the JVM".
Sounds cool and trendy.
Weld, on the other hand, comes from the Java EE world, based on standards and traditional concepts.
But wait, what if we try to combine the two worlds to get the best of them?


Vert.x makes use of a light-weight distributed messaging system to allow application components to communicate in a loosely coupled way.
This should sound familiar to all CDI users where beans may produce and consume events as well.
Weld team developed a working prototype of Weld/Vert.x integration that allows to automatically register certain observer methods as...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://vertx.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vert.x&lt;/a&gt; defines itself as &quot;a toolkit for building reactive applications on the JVM&quot;.
Sounds cool and trendy.
Weld, on the other hand, comes from the Java EE world, based on standards and traditional concepts.
But wait, what if we try to combine the two worlds to get the best of them?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vert.x makes use of a light-weight distributed messaging system to allow application components to communicate in a loosely coupled way.
This should sound familiar to all CDI users where beans may produce and consume events as well.
Weld team developed a &lt;a href=&quot;https://github.com/weld/weld-vertx&quot;&gt;working prototype&lt;/a&gt; of Weld/Vert.x integration that allows to automatically register certain observer methods as Vert.x message consumers.
A simple echo message consumer could look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;import org.jboss.weld.vertx.VertxConsumer;
import org.jboss.weld.vertx.VertxEvent;

class Foo {
    public void echoConsumer(@Observes @VertxConsumer(&quot;test.echo.address&quot;) VertxEvent event) {
        event.setReply(event.getMessageBody());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@VertxConsumer&lt;/code&gt; - a qualifier used to specify the address the consumer will be registered to: &lt;code&gt;test.echo.address&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;VertxEvent&lt;/code&gt; - a wrapper of a Vert.x message&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we’re working with a regular observer method, additional parameters may be declared (next to the event parameter).
These parameters are injection points. So it’s easy to &lt;strong&gt;declare a message consumer dependencies&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public void consumerWithDependencies(@Observes @VertxConsumer(&quot;test.dependencies.address&quot;) VertxEvent event, CoolService coolService, StatsService statsService) {
    coolService.process(event.getMessageBody());
    statsService.log(event);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you inject a dependent bean, it will be destroyed when the invocation completes.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least - an observer may also &lt;strong&gt;send/publish messages using the Vert.x event bus&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public void consumerStrikesBack(@Observes @VertxConsumer(&quot;test.publish.address&quot;) VertxEvent event) {
    event.messageTo(&quot;test.huhu.address&quot;).publish(&quot;huhu&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And how does it work under the hood?
First of all, it’s necessary to deploy &lt;code&gt;org.jboss.weld.vertx.WeldVerticle&lt;/code&gt;.
This &lt;code&gt;Verticle&lt;/code&gt; starts Weld SE container and automatically registers &lt;code&gt;org.jboss.weld.vertx.VertxExtension&lt;/code&gt; to process all observer methods and detect observers which should become message consumers.
Then a special handler is registered for each address to bridge the event bus to the CDI world.
Handlers use &lt;code&gt;Vertx.executeBlocking()&lt;/code&gt; since we expect the code to be blocking.
Later on, whenever a new message is delivered to the handler, &lt;code&gt;Event.fire()&lt;/code&gt; is used to notify all relevant observers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The prototype is surely missing some features. Nevertheless, it shows the CDI programming model might be applicable to the &quot;reactive&quot; world even if not a first class citizen.
Moreover, the prototype demonstrates the flexibility of the CDI extension mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to try it out, you’ll have to clone the &lt;a href=&quot;https://github.com/weld/weld-vertx&quot; class=&quot;bare&quot;&gt;https://github.com/weld/weld-vertx&lt;/a&gt; repository and build it from source (i.e. run &lt;code&gt;mvn clean install&lt;/code&gt;).
And if you find it useful feel free to add comments to this blog post. Any feedback is appreciated!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/02/12/weld-233Final/</id>
<title>Weld 2.3.3.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-02-12T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/02/12/weld-233Final/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
Weld 2.3.3.Final the next bug-fix version of the stable 2.3 branch has been released!
See also the release details.
Thanks to everyone involved in this release!
Notable improvements:




allow to proxy classes with non-static non-private final methods



this is a non-portable way to get around the CDI spec restrictions, see also Proxying classes with final methods and CDI-527


use with caution!





other enhancements and bug-fixes around proxies:



better support for DeltaSpike partial beans (WELD-2084)


better support for Camel CDI (WELD-2089)


better support for proxies with non public classes (WELD-2091)





Weld Probe has a slightly redesigned menu and a new Dashboard view with some basic stats


the decorator validation was improved (WELD-2085, WELD-1811,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 2.3.3.Final the next bug-fix version of the stable 2.3 branch has been released!
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328954&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the release details&lt;/a&gt;.
Thanks to everyone involved in this release!
Notable improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;allow to proxy classes with non-static non-private final methods&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;this is a non-portable way to get around the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#unproxyable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI spec restrictions&lt;/a&gt;, see also &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.3.Final/en-US/html/configure.html#_proxying_classes_with_final_methods&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Proxying classes with final methods&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/CDI-527&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI-527&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;use with caution!&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other enhancements and bug-fixes around proxies:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;better support for DeltaSpike partial beans (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2084&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2084&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;better support for Camel CDI (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2089&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2089&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;better support for proxies with non public classes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2091&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2091&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Probe has a slightly redesigned menu and a new Dashboard view with some basic stats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the decorator validation was improved (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2085&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2085&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-1811&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-1811&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2039&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2039&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minor SPI cleanup was performed  (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2077&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2077&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2079&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WELD-2079&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.3.3.Final/wildfly-10.0.0.Final-weld-2.3.3.Final-patch.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.3.Final/en-US/html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328954&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/02/08/weld-se-synth-lifecycle-events/</id>
<title>Weld SE and synthetic container lifecycle event observers</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-02-08T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/02/08/weld-se-synth-lifecycle-events/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="api"></category>
<category term="draft"></category>
<summary>
Last week Weld 3.0.0.Alpha15 was released and so it&#8217;s time to reveal the features that should go into the next experimental release.
The main goal of Weld 3.0.0.Alpha16 is to reflect the output of CDI-558.
However, we would also like to continue to deliver experimental prototypes so that users could test a new functionality (that we find interesting and useful) and the CDI EG could eventually include this into CDI 2.0.


It should be easier to start playing with extensions in Weld SE. Right now, it&#8217;s possible to pass an Extension instance to the Weld builder so that it&#8217;s not necessary to configure...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week Weld 3.0.0.Alpha15 was released and so it’s time to reveal the features that should go into the next experimental release.
The main goal of Weld 3.0.0.Alpha16 is to reflect the output of &lt;a href=&quot;https://issues.jboss.org/browse/CDI-558&quot;&gt;CDI-558&lt;/a&gt;.
However, we would also like to continue to deliver experimental prototypes so that users could test a new functionality (that we find interesting and useful) and the CDI EG could eventually include this into CDI 2.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be easier to start playing with extensions in Weld SE. Right now, it’s possible to pass an &lt;code&gt;Extension&lt;/code&gt; instance to the &lt;code&gt;Weld&lt;/code&gt; builder so that it’s not necessary to configure service providers (i.e. &lt;code&gt;META-INF/services/javax.enterprise.inject.spi.Extension&lt;/code&gt; file).
In such case, the extension class is automatically scanned for observer methods and the instance is used as the receiver of the notifications.
We would like to make this even easier.
It is now possible to add a &lt;strong&gt;synthetic container lifecycle event observer&lt;/strong&gt; without declaring an extension class.
The observer logic is represented as a lambda expression.
This might be especially useful for prototyping and/or for discovering how extensions work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The starting point is the &lt;code&gt;org.jboss.weld.environment.se.ContainerLifecycleObserver&lt;/code&gt; class.
There are few static methods, each corresponding to a specific container lifecycle event (e.g. &lt;code&gt;beforeBeanDiscovery()&lt;/code&gt;).
Some variants return a builder so that it’s possible to customize the observer (observed type, priority, etc.).
Others accept a lambda and return an observer instance direcly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A synthetic observer may be added to the builder directly - see &lt;code&gt;Weld.addContainerLifecycleObserver()&lt;/code&gt; - or grouped in a synthetic extension - see &lt;code&gt;ContainerLifecycleObserver.extensionBuilder()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;Extension testExtension = ContainerLifecycleObserver.extensionBuilder()
    .add(afterBeanDiscovery((e) -&amp;gt; System.out.println(&quot;Bean discovery completed!&quot;)))
    .add(processAnnotatedType().notify((e) -&amp;gt; {
            if (e.getAnnotatedType().getJavaClass().getName().startsWith(&quot;com.foo&quot;)) {
                e.veto();
            }
        })).build();

try (WeldContainer container = new Weld().addExtension(testExtension).initialize()) {
    // Use the container...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature is merged in the master branch. If you want to try it out, you’ll have to use a &lt;strong&gt;3.0.0-SNAPSHOT&lt;/strong&gt; version or build the Weld from source: &lt;code&gt;mvn clean install&lt;/code&gt;.
Do you find it useful? Any feedback is appreciated! Feel free to add comments to this blog post or to the corresponding issue: &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2102&quot;&gt;WELD-2012&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2016/02/04/weld-300Alpha15/</id>
<title>Weld 3.0.0.Alpha15</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2016-02-04T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2016/02/04/weld-300Alpha15/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<category term="cdi2"></category>
<summary>
Weld 3.0.0.Alpha15 the next experimental Weld version has been released.
See also the release details.


The CompletionStage used to bind actions to the completion of the asynchronous delivery is now using org.jboss.weld.manager.api.ExecutorServices SPI as the default asynchronous execution facility.
Previously, the ForkJoinPool#commonPool() (a default executor of the underlying CompletableFuture) was used.
It&#8217;s an important change because the ForkJoinPool#commonPool() is not a good fit for Java EE.
See also WELD-2073.


The ExperimentalAfterBeanDiscovery receives two more methods: interceptorBuilder() and addInterceptor().
An interceptor builder allows you to create an interceptor bean without the need to create an interceptor class.
This might be handy for simple use cases:



class MyExtension {
  void...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.0.0.Alpha15 the next experimental Weld version has been released.
See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327857&quot;&gt;the release details&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;CompletionStage&lt;/code&gt; used to bind actions to the completion of the asynchronous delivery is now using &lt;code&gt;org.jboss.weld.manager.api.ExecutorServices&lt;/code&gt; SPI as the default asynchronous execution facility.
Previously, the &lt;code&gt;ForkJoinPool#commonPool()&lt;/code&gt; (a default executor of the underlying &lt;code&gt;CompletableFuture&lt;/code&gt;) was used.
It’s an important change because the &lt;code&gt;ForkJoinPool#commonPool()&lt;/code&gt; is not a good fit for Java EE.
See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2073&quot;&gt;WELD-2073&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ExperimentalAfterBeanDiscovery&lt;/code&gt; receives two more methods: &lt;code&gt;interceptorBuilder()&lt;/code&gt; and &lt;code&gt;addInterceptor()&lt;/code&gt;.
An interceptor builder allows you to create an interceptor bean without the need to create an interceptor class.
This might be handy for simple use cases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;class MyExtension {
  void afterBeanDiscovery(@Observes AfterBeanDiscovery event) {
    event.addInterceptor().intercept(InterceptionType.AROUND_INVOKE, (c) -&amp;gt; {
            long start = System.currentTimeMillis();
            try {
                return c.proceed();
            } finally {
                System.out.println(&quot;Time: &quot; + System.currentTimeMillis() - start);
            }
        }).priority(2600).addBinding(MonitoringBinding.Literal.INSTANCE);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2008&quot;&gt;WELD-2008&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release also contains some enhancements and bugfixes around proxies.
E.g. better support for DeltaSpike partial beans (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2084&quot;&gt;WELD-2084&lt;/a&gt;), better support for Camel CDI (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2089&quot;&gt;WELD-2089&lt;/a&gt;) and better support for proxies with non public classes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2091&quot;&gt;WELD-2091&lt;/a&gt;).
Furthermore, we are going to drop Jetty 7,8, 9.0, 9.1 and 9.2 support in Weld 3 (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2032&quot;&gt;WELD-2032&lt;/a&gt;).
Also the decorator validation was improved (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2085&quot;&gt;WELD-2085&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-1811&quot;&gt;WELD-1811&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2039&quot;&gt;WELD-2039&lt;/a&gt;).
Last but not least, we have performed some SPI cleanup (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2077&quot;&gt;WELD-2077&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2079&quot;&gt;WELD-2079&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha15/wildfly-10.0.0.Final-weld-3.0.0.Alpha15-patch.zip&quot;&gt;patch for WildFly&lt;/a&gt; is available. This patch not only upgrades Weld within an existing WildFly instance but also upgrades CDI API to 2.0 EDR1. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327857&quot;&gt;Release notes&lt;/a&gt; ]
[ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha15/weld-3.0.0.Alpha15.zip&quot;&gt;Distribution&lt;/a&gt; ]
[ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha15/wildfly-10.0.0.Final-weld-3.0.0.Alpha15-patch.zip&quot;&gt;Patch for Wildfly 10.0.0.Final&lt;/a&gt;
]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2015/12/10/weld-232Final/</id>
<title>Weld 2.3.2.Final</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2015-12-10T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2015/12/10/weld-232Final/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<summary>
Weld 2.3.2.Final the last version for this year has been released! It is a bug-fixing release with 15 issues resolved. See also the release details. Thanks to everyone involved in this release!


Notable bug-fixes and enhancements




Weld proxies - add workaround for IBM JVM 8 (WELD-2056 and DELTASPIKE-1010)


Fix resource injection when using arquillian-weld-ee-embedded-1.1 (WELD-2065 and ARQ-2000)


All conversation contexts should be destroyed after the Servlet.service() method completes (WELD-2052)


Clear RequestScopedCache for remote EJB calls (WELD-2069)


Weld Servlet



Allow to perform dependency injection upon objects not having a CDI-compatible constructor (WELD-2039)


Add Jandex support even for WARs not extracted to the file system (WELD-2070)





Probe development tool is now...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 2.3.2.Final the last version for this year has been released! It is a bug-fixing release with 15 issues resolved. See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328625&quot;&gt;the release details&lt;/a&gt;. Thanks to everyone involved in this release!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_notable_bug_fixes_and_enhancements&quot;&gt;Notable bug-fixes and enhancements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weld proxies - add workaround for IBM JVM 8 (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2056&quot;&gt;WELD-2056&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DELTASPIKE-1010&quot;&gt;DELTASPIKE-1010&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix resource injection when using &lt;code&gt;arquillian-weld-ee-embedded-1.1&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2065&quot;&gt;WELD-2065&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/ARQ-2000&quot;&gt;ARQ-2000&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All conversation contexts should be destroyed after the &lt;code&gt;Servlet.service()&lt;/code&gt; method completes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2052&quot;&gt;WELD-2052&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear &lt;code&gt;RequestScopedCache&lt;/code&gt; for remote EJB calls (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2069&quot;&gt;WELD-2069&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weld Servlet&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow to perform dependency injection upon objects not having a CDI-compatible constructor (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2039&quot;&gt;WELD-2039&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Jandex support even for WARs not extracted to the file system (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2070&quot;&gt;WELD-2070&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probe development tool is now part of the OSGi bundle (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2061&quot;&gt;WELD-2061&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
[ &lt;a href=&quot;https://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
[ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.2.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328625&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://weld.cdi-spec.org/news/2015/12/04/weld-300Alpha14/</id>
<title>Weld 3.0.0.Alpha14</title>
<updated>2021-03-18T16:09:46+01:00</updated>
<published>2015-12-04T00:00:00+00:00</published>
<link href="https://weld.cdi-spec.org/news/2015/12/04/weld-300Alpha14/" rel="alternate" type="text/html" />
<author>
<name>Martin Kouba</name>
</author>
<category term="release"></category>
<category term="cdi2"></category>
<summary>
Weld 3.0.0.Alpha14 the penultimate Weld version for this year has been released into the wild.
It reflects some of the most recent changes in the CDI 2.0 specification, mostly related to asynchronous events.
Moreover, this release also contains quite a lot of enhancements and bugfixes. See also the release details.


WildFly Patch


As usual, a patch for WildFly is available. This patch not only upgrades Weld within an existing WildFly instance but also upgrades CDI API to 2.0 EDR1. This time the target platform is WildFly 10.0.0.CR4.  If you’re not familiar with patching WildFly, check Markus&#8217;s tutorial.


&#91; Experimental API documentation &#93;
&#91; Release notes...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weld 3.0.0.Alpha14 the penultimate Weld version for this year has been released into the wild.
It reflects some of the most recent changes in the CDI 2.0 specification, mostly related to asynchronous events.
Moreover, this release also contains quite a lot of enhancements and bugfixes. See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327856&quot;&gt;the release details&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha14/wildfly-10.0.0.CR4-weld-3.0.0.Alpha14-patch.zip&quot;&gt;patch for WildFly&lt;/a&gt; is available. This patch not only upgrades Weld within an existing WildFly instance but also upgrades CDI API to 2.0 EDR1. This time the target platform is &lt;strong&gt;WildFly 10.0.0.CR4&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327856&quot;&gt;Release notes&lt;/a&gt; ]
[ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha14/weld-3.0.0.Alpha14.zip&quot;&gt;Distribution&lt;/a&gt; ]
[ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha14/wildfly-10.0.0.CR4-weld-3.0.0.Alpha14-patch.zip&quot;&gt;Patch for Wildfly 10 CR4&lt;/a&gt;
]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
</feed>
