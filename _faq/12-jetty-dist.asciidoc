= How to deploy a Weld application to a Jetty standalone instance?

You should not experience any classloading issues when starting Jetty as an embedded webapp server from within another Java program. However, if you're using a Jetty standalone instance the deployment with bundled Weld Servlet integration will probably fail and you may observe a similar message in the log:

----
FAILED org.eclipse.jetty.annotations.ServletContainerInitializerListener@124d02b2: java.lang.NoClassDefFoundError: org/eclipse/jetty/servlet/ServletContextHandler$Decorator
java.lang.NoClassDefFoundError: org/eclipse/jetty/servlet/ServletContextHandler$Decorator
----

The reason is that since Jetty 8 some internal classes are not visible from the web application. See also http://www.eclipse.org/jetty/documentation/current/jetty-classloading.html#setting-server-classes[Setting Server Classes]. Therefore, we have to tell Jetty not to hide the system classes which Weld integration code is using. Unfortunately, it's not so simple. The only workaround is to use a http://www.eclipse.org/jetty/documentation/current/configuring-specific-webapp-deployment.html[Jetty Deployable Descriptor XML File] (this is a Jetty 9 feature, in Jetty 8 a similar feature is incorporated - http://wiki.eclipse.org/Jetty/Feature/ContextDeployer[ContextProvider]). For instance, if there is an application archive named `weld-numberguess.war` deployed in the `webapps` directory, an XML descriptor named `weld-numberguess.xml` should be created in the same directory (the file should have the same base name as the war - see alse the scanning rules described in http://www.eclipse.org/jetty/documentation/current/deployment-architecture.html#default-web-app-provider[Jetty docs]):

[source]
----
<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">
<Configure class="org.eclipse.jetty.webapp.WebAppContext">
  <Set name="contextPath">/weld-numberguess</Set>
  <Set name="war"><Property name="jetty.webapps" default="."/>/weld-numberguess.war</Set>
  <Call name="prependServerClass">
    <Arg>-org.eclipse.jetty.servlet.FilterHolder</Arg>
  </Call>
  <Call name="prependServerClass">
    <Arg>-org.eclipse.jetty.server.handler.ContextHandler</Arg>
  </Call>
  <Call name="prependServerClass">
    <Arg>-org.eclipse.jetty.servlet.ServletContextHandler</Arg>
  </Call>
  <Call name="prependServerClass">
    <Arg>-org.eclipse.jetty.servlet.ServletHolder</Arg>
  </Call>
</Configure>
----

Note that Jetty distributions (from version *9.2.4*) contain a *dedicated http://www.eclipse.org/jetty/documentation/current/framework-weld.html[CDI/Weld module]* which allows to deploy a CDI application without bundling the Weld Servlet integration code. However note that if you want
to deploy application using CDI along with JSF (weld-numberguess example) you need to copy following jar dependencies directly to CDI module directory:

* JSF API jar
* JSF IMPL jar
* https://github.com/weld/core/tree/2.3/jsf[Weld Core JSF] jar
